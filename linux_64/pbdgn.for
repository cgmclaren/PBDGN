C******************************************************* RUNPBDGN
C  PURPOSE:
C  Get the command file from the command line or console and call PBDGN
C  COMMAND FILE FORMAT:
C  A single record with the following parameters and format:
C  IDSGN I3  DESIGN TYPE 1=RCBD, 2=SPLIT PLOT, 3=LATICE BLOCK,
C            4=LATTICE SQUARE, 5=RECT LATTICE, 6=LATIN SQUARE
C            7=AUGMENTED LATIN SQUARE, 8=AUGMENTED RCB, 9=ALPHA(0,1)
C  FNAM  A8  NAME FOR SYS LAYOUT FILE (BLANK FOR NONE)
C  ISRP  I3  ORDER OF LAYOUT, 1=SERPENTINE, 0=PLOT ORDER
C  NTRT  IS  NUMBER OF DISTINCT ENTRIES OR MAIN PLOT TREATMENTS FOR IDSGN=2
C  NSUB  I3  NUMBER OF SUB-PLOT TREATMENTS FOR IDSGN=2
C            NUMBER OF TREATMENTS PER BLOCK FOR IDSGN=9
C            NUMBER OF DISTINCT LATIN SQUARES FOR IDSGN=6 (1,2 OR 3)
C            NUMBER OF BLOCKS FOR IDSGN=8, ZERO FOR IDSGN=7
C  NREP  I3  NUMBER OF COMPLETE REPS FOR IDSGN=1-5,9 ZERO FOR 6
C            NUMBER OF REPLICATED ENTRIES FOR IDSGN=7 OR 8
C  NROWS I3  NUMBER OF ROWS IN THE PLOT LAY-OUT FOR IDSGN=7 OR 8
C  NTRL  I3  NUMBER OF TRIALS TO BE GENERATED WITH THE SAME DESIGN
C  ISEED I8  RANDOM NUMBER SEED
C  TITLE A72 HEADING
C
C---- LAST UPDATE 11/03/15 ----------------------------- RUNPBDGN
      PARAMETER (ICON=99)
      CHARACTER*128 CMDFL,OUTFL,CTMP,EXT*3
      INTEGER*4 ERROR
      INTEGER*2 IER2
C------------------------------------------------------
C CONNECT LOGICAL UNIT 99 (icon) TO THE CONSOLE IN CASE
C THE CMD FILE NAME IS NOT ON TEH COMMAND LINE
      OPEN(ICON,FILE='CONOUT$')
      EXT='DGN'
      CALL CMDFIL(ICON,1,EXT,EXT,'OLD',CTMP)
 	CLOSE(1)
      CMDFL=CTMP(1:LEN_TRIM(CTMP))//'.DGN'
      OUTFL=CTMP(1:LEN_TRIM(CTMP))//'.OUT'
      OPEN(6,FILE=OUTFL,STATUS='REPLACE')
      OPEN(4,FILE=CTMP(1:LEN_TRIM(CTMP))//'.CSV',STATUS='REPLACE')
      OPEN(99,FILE=CTMP(1:LEN_TRIM(CTMP))//'.LOG',STATUS='REPLACE')
	ERROR=0
      CALL PBDGN(CMDFL,ERROR)
      STOP
      END
C******************************************************* CMDFIL
C  PURPOSE:
C  TO GET A COMMAND FILE NAME FROM THE COMMAND LINE OR USER
C
C  ARGUMENTS:C  ICON- LOGICAL UNIT FOR THE SCREEN
C  ICMD- LOGICAL UNIT TO BE ASSIGNED TO THE COMMAND FILE
C  DFNM- DEFAULT COMMAND FILE NAME, MAY BE BLANK FOR NO DEFAULT
C        OR MAY BE 'CON' FOR CONSOLE WHEN THERE IS NO NAME
C        ON THE COMMAND LINE
C  DFXT- DEFAULT COMMAND FILE EXTENSION
C  STAT- STATUS FOR THE COMMAND FILE 'NEW','OLD' OR 'UNKNOWN'
C  FNAM- RETURNS WITH THE COMMAND FILE NAME (WITHOUT EXTENSION)
C---- LAST UPDATE 11/01/95 ----------------------------- CMDFIL
      SUBROUTINE CMDFIL(ICON,ICMD,DFNM,DFXT,STAT,FNAM)
      INTEGER*2 IER2
      CHARACTER DFNM*(*),DFXT*(*),STAT*(*),FNAM*(*),CWK*80,STS*80
      STS=STAT
      CALL GETARG(1,CWK)
      IF(CWK.EQ.' ') GOTO 2
      I=INDEX(CWK,',')
      IF(I.GT.0) CWK(I:)=' '
 1    I=INDEX(CWK,'.')
      IF(I.GT.0) THEN
      IF(CWK(I+1:).NE.DFXT) THEN
      WRITE(ICON,110)
 110  FORMAT(/' *** ERROR *** ILLEGAL CMD FILE EXTENSION')
      GOTO 2
      ENDIF
      CWK(I:)=' '
      ENDIF
      FNAM=CWK(SCAN(CWK,'',.TRUE.)+1:)
      IF(CWK.EQ.' ') GOTO 2
      CWK(LEN_TRIM(CWK)+1:)='.'//DFXT
      OPEN(ICMD,FILE=CWK,STATUS=STS,IOSTAT=I)
      IF(I.EQ.0) GOTO 3
      IF(I.EQ.6415.AND.STAT.EQ.'NEW') THEN
      WRITE(ICON,100) CWK(1:LEN_TRIM(CWK))
 100  FORMAT(' FILE ',A,' EXISTS, RETURN TO DELETE, ./ TO ABORT.')
      READ(5,'(A)') STS
      IF(STS.EQ.'./') STOP 1
C     1 CALL BSTOP('CMDFIL - REQUEST FOR CMD FILE ABORTED',*99)
      STS='UNKNOWN'
      GOTO 1
      ENDIF
      WRITE(ICON,101) I,CWK(1:LEN_TRIM(CWK))
 101  FORMAT(' *** ERROR',I10,' *** UNABLE TO OPEN FILE - ',A)
 2    IF(DFNM.EQ.'CON') THEN
      FNAM=DFNM
      OPEN(ICMD,FILE=FNAM)
      WRITE(ICON,102)
 102  FORMAT(/' ENTER PARAMETERS FROM THE KEYBOARD')
      RETURN
      ENDIF
 4    IF(DFNM.EQ.' ') THEN
      WRITE(ICON,103) DFXT
 103  FORMAT(' ENTER NAME OF THE COMMAND FILE,',
     1' (EXTN .',A3,' ASSUMED, ./ TO ABORT)')
      ELSE
      WRITE(ICON,104) DFXT,DFNM(1:LEN_TRIM(DFNM)),DFXT
 104  FORMAT(' ENTER NAME OF THE COMMAND FILE,'/
     1' (EXTN .',A3,' ASSUMED, BLANK FOR ',A,'.',A3,', ./ TO ABORT)')
      ENDIF
      READ(5,'(A)') CWK
      IF(CWK.EQ.'./') STOP 1
C     1 CALL BSTOP('CMDFIL - REQUEST FOR CMD FILE ABORTED',*99)
      IF(CWK.EQ.' ') CWK=DFNM
      IF(CWK.EQ.' ') GOTO 4
      GOTO 1
 3    WRITE(ICON,105) CWK(1:LEN_TRIM(CWK))
 105  FORMAT(/' PROCESSING COMMAND FILE ',A)
      RETURN
      END
C******************************************************* PBDGN
C  PURPOSE:
C  TO PRODUCE RANDMIZED TREATMENT KEYS AND LOG BOOKS
C  FOR THE FOLLOWING DESIGNS:
C
C     1. RANDOMIZED BLOCKS (MAX 1000 PLOTS)
C     2. SPLIT PLOTS (MAX 100 MP TRTS AND 1000 PLOTS)
C     3. LATTICE BLOCKS (4X4 UP TO 5 REPS, 5X5 UP TO 6 REPS,
C        7X7 UP TO 6 REPS, 8X8, 9X9 AND 10X10 UP TO 3 REPS
C        WITH OPTIONAL REPETITIONS OF THE BASIC DESIGN)
C     4. LATTICE SQUARES. (16, 25, 49, 64 AND 81 TRTS
C        UP TO 6 REPS OR 300 PLOTS WHICHEVER IS SMALLER)
C     5. RECTANGULAR LATTICES. (12, 20, 30, 42, 56 TRTS,
C        WITH 2 OR 3 DISTINCT REPS AND OPTIONAL REPETITIONS)
C     6. LATIN SQUARE DESIGN (UP TO 31 TREATMENTS)
C     7. AUGMENTED DESIGN WITH UP TO 1000 PLOTS. IMBEDDED
C        REPLICATED DESIGN MAY BE LATIN SQUARE (MAX ORDER 20)
C     8. OR RANDOMIZED COMPLETE BLOCK (MAX 800 PLOTS).
C        FIELD LAY OUT OF THE WHOLE ARRAY MUST BE RECTANGULAR,
C        IMBEDDED DESIGN WILL BE SPACED AS WELL AS POSSIBLE.
C     9. ALPHA 0-1 LATTICE DESIGNS WITH UP TO 600 ENTRIES.
C
C     KEYPLT VECTOR GIVES TRT NUMBERS IN EACH PLOT
C     DESIGN DETAILS ARE WORKED OUT FROM THIS, ASSUMING PLOTS
C     NUMBERED IN THE CONVENTIONAL MANNER
C
C     LU0 = CONSOLE
C     LU1 = COMMAND FILE
C     LU2 = OUTPUT FILE (DEFAULT IS PBDGN.OUT)
C     LU4 = OUTPUT SYS FILE FOR LAYOUT
C
C  UPDATES:
C  23/05/95 ADDED LATIN SQUARE
C  24/05/95 ADDED AUGMENTED DESIGN
C  23/10/96 ADDED PLANS FOR 8X8 AND 9X9 LATTICE SQUARES
C  12/02/03 ADDED ALPHA
C  25/06/10 IMPROVED ALPHA PARAMETER ERROR MESSAGES
C------------------------------------------------------- PBDGN
      SUBROUTINE PBDGN(CMDFL,IERROR)
      PARAMETER (LU0=99,LU1=1,LU2=6)
      DOUBLE PRECISION DSEED
      CHARACTER FNM*8,TITLE*72,IFMTH*105,CTMP*14,CWK*80,CMDFL*(*)
      CHARACTER CDES(9)*72,VDES(6)*12
      COMMON/SET1/JTEMP(400)
      COMMON/SET2/IDSGN,ISEED,LGBK,FNM,ISRP,NTRL,NTRLS,
     1 NTRT,NSUB,NREP,NROWS,TITLE,NSQRS
      COMMON/SET3/KEYPLT(1000)
      COMMON/SET4/IREC,X(6),CDES,VDES
      INTEGER LINE(20),IDAY(3),ITIME(3)
      DATA IFMTH/'(1X,19HTRIAL DESCRIPTION: ,A/14H TRIAL NUMBER:,I3,
     1 20X,5H SITE,25(1H.),8X,12HRANDOM SEED ,I7/)'/
      CDES(4)='V001 TRIAL TRIAL NUMBER'
      CDES(5)='V002 PLOT PLOT NUMBER'
	VDES(1)='   TRIAL'
      VDES(2)='    PLOT'
      CALL DATIM(IDAY,ITIME)
      OPEN(LU1,FILE=CMDFL,STATUS='OLD',IOSTAT=IER)
      IF(IER.NE.0) CALL ERTN('OPEN ERROR ON CMD FILE '//CMDFL,IER,*99)
C ----- READ THE DETAILS OF THE DESIGN ---------------------------
 1    READ(LU1,101,END=98) IDSGN,FNM,ISRP,NTRT,NSUB,
     1                     NREP,NROWS,NTRL,ISEED,TITLE
 101  FORMAT(I3,1X,A8,6I3,I8,1X,A)
      IF(IDSGN.LT.1.OR.IDSGN.GT.9)
     1CALL ERTN('ILLEGAL DESIGN NO',IDSGN,*99)
      NTRLS=0
      LGBK=1
      IF(FNM.EQ.' ') LGBK=0
      IF(ISRP.NE.0) ISRP=-1
      DSEED=ISEED
C
 2    NTRLS=NTRLS+1
C ---- RCBD ----------------------------------------------
	IF (IDSGN.EQ.1) THEN
      WRITE(CWK,320) 'FIELD PLAN FOR',NTRT,NREP
 320  FORMAT(A,' RANDOMIZED BLOCK DESIGN,',I4,' TRTS,',I3,' REPS')
      CALL TPAGE(CWK,CMDFL,IDAY,ITIME,0,LU2,0,0,LINE)
      WRITE(LU2,IFMTH) TITLE,NTRLS,ISEED
      CALL GRB(DSEED,*99)
	IF(NROWS.EQ.0) NROWS=1 
	IF(NROWS.GT.0) THEN
	NCOLS=NTRT/NROWS
	IF (NROWS*NCOLS.NE.NTRT) 
     1CALL ERTN('ILLEGAL NUMBER OF ROWS',IDSGN,*99)
	CALL PRTP3(NREP,NROWS,NCOLS,1,'REP ','ROW ','COL ',*99)
	ENDIF
      WRITE(CWK,320) 'TREATMENT KEY FOR',NTRT,NREP
      CALL TPAGE(CWK,CMDFL,IDAY,ITIME,0,LU2,0,0,LINE)
      WRITE(LU2,IFMTH) TITLE,NTRLS,ISEED
      CALL PRTP1(*99)
      GO TO 10
	ENDIF
C ---- SPLOT PLOT --------------------------------------
	IF (IDSGN.EQ.2) THEN
      WRITE(CWK,330) 'FIELD PLAN FOR',NTRT,NSUB,NREP
 330  FORMAT(A,' SPLIT PLOT DESIGN',I4,' MAIN',I4' SUBS',I4,' REPS')
      CALL TPAGE(CWK,CMDFL,IDAY,ITIME,0,LU2,0,0,LINE)
      WRITE(LU2,IFMTH) TITLE,NTRLS,ISEED
      CALL GSP(DSEED,*99)
	CALL PRTP3(NREP,NTRT,NSUB,1,'REP ','MPLT','SPLT',*99)
      WRITE(CWK,330) 'TREATMENT KEY FOR',NTRT,NREP
      CALL TPAGE(CWK,CMDFL,IDAY,ITIME,0,LU2,0,0,LINE)
      WRITE(LU2,IFMTH) TITLE,NTRLS,ISEED
      CALL PRTP1(*99)
      GO TO 10
	ENDIF
C ----- LATTICE BLOCKS ------------------------------------
      IF(IDSGN.EQ.3) THEN
	KEYLAT=1
      WRITE(CWK,340) 'FIELD PLAN FOR',NTRT,NREP
 340  FORMAT(A,' LATTICE DESIGN,',I3,' TRTS,',I3,' REPS')
      CALL TPAGE(CWK,CMDFL,IDAY,ITIME,0,LU2,0,0,LINE)
      WRITE(LU2,IFMTH) TITLE,NTRLS,ISEED
      IF(NTRT.NE.16.AND.NTRT.NE.25.AND.NTRT.NE.49
     1   .AND.NTRT.NE.64.AND.NTRT.NE.81) THEN
      CALL GLT(NPPB,DSEED,*99)
      ELSE
C FOR 16,25,49,64 AND 81 USE LATTICE SQUARE AND DE-RANDOMIZE COLS
      CALL GLSQ(NPPB,KEYLAT,DSEED,*99)
	ENDIF
	CALL PRTP3(NREP,NPPB,NPPB,1,'REP ','BLK ','PLT ',*99)
      WRITE(CWK,340) 'TREATMENT KEY FOR',NTRT,NREP
      CALL TPAGE(CWK,CMDFL,IDAY,ITIME,0,LU2,0,0,LINE)
      WRITE(LU2,IFMTH) TITLE,NTRLS,ISEED
	CALL PRTP1(*99)
	GOTO 10
	ENDIF
C ---- LATTICE SQUARES -----------------------------
      IF(IDSGN.EQ.4) THEN
	KEYLAT=2
      WRITE(CWK,350) 'FIELD PLAN FOR',NTRT,NREP
 350  FORMAT(A,' LATTICE SQUARE DESIGN,',I3,' TRTS,',I3,' REPS')
      CALL TPAGE(CWK,CMDFL,IDAY,ITIME,0,LU2,0,0,LINE)
      WRITE(LU2,IFMTH) TITLE,NTRLS,ISEED
      IF(NTRT.NE.16.AND.NTRT.NE.25.AND.NTRT.NE.49
     1.AND.NTRT.NE.64.AND.NTRT.NE.81) CALL ERTN
     2('ONLY 16,25,49,64 OR 81 TRTS FOR LATTICE SQUARES',NTRT,*99)
      CALL GLSQ(NPPB,KEYLAT,DSEED,*99)
	CALL PRTP3(NREP,NPPB,NPPB,1,'REP ','ROW ','COL ',*99)
      WRITE(CWK,350) 'TREATMENT KEY FOR',NTRT,NREP
      CALL TPAGE(CWK,CMDFL,IDAY,ITIME,0,LU2,0,0,LINE)
      WRITE(LU2,IFMTH) TITLE,NTRLS,ISEED
	CALL PRTP1(*99)
      GO TO 10
	ENDIF
C ---- RECTANGULAR LATTICE --------------------------------------------
	IF(IDSGN.EQ.5) THEN
      WRITE(CWK,360) 'FIELD PLAN FOR',NTRT,NREP
 360  FORMAT(A,' RECTANGULAR LATTICE,',I3,' TRTS,',I3,' REPS')
      CALL TPAGE(CWK,CMDFL,IDAY,ITIME,0,LU2,0,0,LINE)
      WRITE(LU2,IFMTH) TITLE,NTRLS,ISEED
      CALL RLAT(NBPR,NPPB,DSEED,*99)
	CALL PRTP3(NREP,NBPR,NPPB,1,'REP ','BLK ','PLT ',*99)
      WRITE(CWK,360) 'TREATMENT KEY FOR',NTRT,NREP
      CALL TPAGE(CWK,CMDFL,IDAY,ITIME,0,LU2,0,0,LINE)
      WRITE(LU2,IFMTH) TITLE,NTRLS,ISEED
      CALL PRTP1(*99)
	GO TO 10 
      ENDIF
C ----- LATIN SQUARE ----------------------------
      IF(IDSGN.EQ.6) THEN
      NSQRS=NSUB
	NREP=NTRT
      WRITE(CWK,361) 'FIELD PLAN FOR',NTRT,NSQRS
 361  FORMAT(A,' LATIN SQUARE DESIGN,',I3,' TRTS,',I3,' SQUARES')
      CALL TPAGE(CWK,CMDFL,IDAY,ITIME,0,LU2,0,0,LINE)
      WRITE(LU2,IFMTH) TITLE,NTRLS,ISEED
      CALL LTNSQD(DSEED,*99)
	CALL PRTP3(NSQRS,NTRT,NTRT,1,'SQR ','ROW ','COL ',*99)
      WRITE(CWK,361) 'TREATMENT KEY FOR',NTRT,NREP
      CALL TPAGE(CWK,CMDFL,IDAY,ITIME,0,LU2,0,0,LINE)
      WRITE(LU2,IFMTH) TITLE,NTRLS,ISEED
      CALL PRTP1(*99)
	GO TO 10 
      ENDIF
C ----- AUGMENTED LATIN SQUARE DESIGNS -----------------------
      IF(IDSGN.EQ.7) THEN
      WRITE(CWK,364) 'TREATMENT KEY:',NTRT,NREP,NREP
 364  FORMAT(A,' AUGMENTED DESIGN FOR ',I3,' ENTRIES WITH',I3,
     1' REPLICATED',I3,' TIMES')
      CALL TPAGE(CWK,CMDFL,IDAY,ITIME,0,LU2,0,0,LINE)
      NPLOTS=(NTRT-NREP)+NREP*NREP
      NCOLS=NPLOTS/NROWS
      WRITE(LU2,363) NPLOTS,NROWS,NCOLS
 363  FORMAT(' FIELD LAYOUT IS',I4,' PLOTS IN',I3,' ROWS AND',
     1I3,' COLUMNS WITH IMBEDDED LATIN SQUARE DESIGN'/)
      CALL AUGMT(NCOLS,DSEED,*99)
      WRITE(CWK,362) 
     2'FIELD PLAN FOR AN AUGMENTED LATIN SQUARE',NTRT,NREP
 362  FORMAT(A,',',I3,' ENTRIES,',I3,' REPLICATED')
      CALL TPAGE(CWK,CMDFL,IDAY,ITIME,0,LU2,0,0,LINE)
      WRITE(LU2,IFMTH) TITLE,NTRLS,ISEED
      CALL PRTP3(1,NROWS,NCOLS,2,'    ','ROW ','COL ',*99)
      GOTO 10
      ENDIF
C ----- AUGMENTED RCBD DESIGNS -----------------------
      IF(IDSGN.EQ.8) THEN
      WRITE(CWK,364) 'TREATMENT KEY:',NTRT,NREP,NSUB
      CALL TPAGE(CWK,CMDFL,IDAY,ITIME,0,LU2,0,0,LINE)
      NPLOTS=(NTRT-NREP)+NREP*NSUB
      NCOLS=NPLOTS/NROWS
      WRITE(LU2,365) NPLOTS,NROWS,NCOLS
 365  FORMAT(' FIELD LAYOUT IS',I4,' PLOTS IN',I3,' ROWS AND',
     1I3,' COLUMNS WITH IMBEDDED RCBD DESIGN'/)
      CALL AUGMT(NCOLS,DSEED,*99)
      WRITE(CWK,362) 'FIELD PLAN FOR AN AUGMENTED RCBD',NTRT,NREP
      CALL TPAGE(CWK,CMDFL,IDAY,ITIME,0,LU2,0,0,LINE)
      WRITE(LU2,IFMTH) TITLE,NTRLS,ISEED
      CALL PRTP3(1,NROWS,NCOLS,2,'    ','ROW ','COL ',*99)
      GOTO 10
      ENDIF
C ----- ALPHA LATTICE ---------------------------
      IF(IDSGN.EQ.9) THEN
      WRITE(CWK,340) 'FIELD PLAN FOR ALPHA',NTRT,NREP
      CALL TPAGE(CWK,CMDFL,IDAY,ITIME,0,LU2,0,0,LINE)
      WRITE(LU2,IFMTH) TITLE,NTRLS,ISEED
      CALL GENALPHA(EFFCY,PCTEF,MAXCON,*99)
	CALL RNDALPHA(DSEED,*99)
	NBPP=NTRT/NSUB
      WRITE (LU2,166) NREP,NTRT,NBPP,NSUB,EFFCY,PCTEF,MAXCON
166   FORMAT(' FIELD PLAN FOR'
     2,I3,' REPS OF',I4,' TREATMENTS IN',I3,' BLOCKS/REP OF'
     3,I3,' PLOTS/BLOCK'/' EFFICIENCY:',F8.4,
     4'(',F5.1,'%), MAXIMUM CONCURANCE:',I3)
	CALL PRTP3(NREP,NBPP,NSUB,1,'REP ','BLK ','PLT ',*99)
      WRITE(CWK,340) 'TREATMENT KEY FOR ALPHA',NTRT,NREP
      CALL TPAGE(CWK,CMDFL,IDAY,ITIME,0,LU2,0,0,LINE)
      WRITE(LU2,IFMTH) TITLE,NTRLS,ISEED
	CALL PRTP1(*99)
      GOTO 10
      ENDIF
C------------------------------------------------
 10   IF(NTRLS.LT.NTRL) GOTO 2
      GO TO 1
 98   RETURN
 99   WRITE(LU0,'('' PBDGN'')')
      IERROR=1
      RETURN
      END
C******************************************************* AUGMT
C  PURPOSE:
C  AUGMENTED DESIGN IN RCBD OR LATIN SQUARE
C---- LAST UPDATE 24/05/95 ----------------------------- AUGMT
      SUBROUTINE AUGMT(NCOLS,DSEED,*)
      PARAMETER (LU0=99,LU2=6,LU4=4)
      DOUBLE PRECISION DSEED,XX
      DIMENSION LINE(20),IRCB(800)
      CHARACTER FNM*8,CDES(9)*72,VDES(6)*12,TITLE*72
      COMMON/LDES/LAT(20,20),LSTND(20,20)
      COMMON/SET1/JTEMP1(100),JTEMP2(100),JTEMP3(200)
      COMMON/SET2/IDSGN,ISEED,LGBK,FNM,ISRP,NTRL,NTRLS,
     1 NTRT,NREP,NTR,NROWS,TITLE,NSQRS
      COMMON/SET3/KEYPLT(1000)
      COMMON/SET4/IREC,X(6),CDES,VDES
      CHARACTER CTMP*12,CWK*80
      EQUIVALENCE (IRCB(1),LAT(1,1))
C  NTRT IS THE TOTAL NUMBER OF ENTRIES TEST (UNREPLICATED) AND CHECK (REPLICATED)
C  NREP IS THE NUMBER OF REPS FOR AN IMBEDDED RCBD (O FOR IMBEDDED LATIN SQUARE)
C  NTR  IS THE NUMBER OF REPLICATED ENTRIES
      NBLK=NREP
      CTMP='RCB'
      IF(NREP.EQ.0) THEN
      CTMP='LATIN SQUARE'
      NSQRS=1
      NBLK=NTR
      IF(NBLK.GT.20) CALL ERTN('IMBEDDED LTNSQ TOO LARGE',NBLK,*99)
      IF(NROWS.LT.NBLK)
     1CALL ERTN('TOO FEW ROWS TO ACCOMODATE BLOCKS',NROWS,*99)
      ENDIF
      IF(NBLK*NTR.GT.800)
     1 CALL ERTN('IMBEDDED RCBD TOO LARGE',NBLK*NTR,*99)
      NPLOTS=(NTRT-NTR)+NTR*NBLK
      IF(NPLOTS.GT.1000)
     1CALL ERTN('TOO MANY PLOTS (MAX 1000)',NPLOTS,*99)
      NCOLS=NPLOTS/NROWS
      IF(NPLOTS.NE.NROWS*NCOLS) THEN
      CALL ERTN('LAYOUT MUST BE RECTANGULAR (NROWS*NCOLS)',NROWS,*99)
      ENDIF
      IF(NCOLS.LT.NTR) THEN
      CALL ERTN('TOO FEW COLUMNS TO ACCOMODATE BLOCKS',NCOLS,*99)
      ENDIF
C ***** RANDOMISE THE IMBEDDED DESIGN
C  LATIN SQUARE
      IF(NSQRS.GT.0) THEN
      CALL GGPER(DSEED,NTR,JTEMP1)
      CALL GGPER(DSEED,NTR,JTEMP2)
      CALL GGPER(DSEED,NTR,JTEMP3)
      DO 55 I=1,NTR
      DO 55 J=1,NTR
      LAT(I,J)=JTEMP1(MOD(JTEMP2(I)+JTEMP3(J),NTR)+1)
 55   CONTINUE
C  RANDOMIZED COMPLETE BLOCK
      ELSE
      DO 56 I=1,NBLK
      CALL GGPER(DSEED,NTR,IRCB((I-1)*NTR+1))
 56   CONTINUE
      ENDIF
C  RANDOMIZE THE TEST ENTRIES
      CALL GGPER(DSEED,NTRT-NTR,KEYPLT)
C  IMBED THE SUB-DESIGN
C  NR IS THE SPACING BETWEEN ROWS OF THE SUB-DESIGN
C  NRR IS THE OFSET FOR REMAINDER
      NR=NROWS/NBLK
      NRR=(NROWS-NR*NBLK)/2
C  IF THE REMAINDER AT TOP AND BOTOM IS LARGE TRY TO DISCARD
      IF((NR+1)*NBLK-NROWS.LE.NR) THEN
      NR=NR+1
      NRR=(NROWS-NR*NBLK-1)/2
      ENDIF
      NC=NCOLS/NTR
      NCR=(NCOLS-NC*NTR)/2
      IF((NC+1)*NTR-NCOLS.LE.NC) THEN
      NC=NC+1
      NCR=(NCOLS-NC*NTR-1)/2
      ENDIF
      KP=NPLOTS
      K1=NTRT-NTR
      ID=NBLK
      JD=NTR
      KD=(NCR+(JD-1)*NC+NC/2)*NROWS+NRR+(ID-1)*NR+NR/2+1
      DO 23 I=NROWS,1,-1
      DO 25 J=NCOLS,1,-1
      IF(KP.EQ.KD) THEN
      IF(NSQRS.EQ.1) THEN
      KEYPLT(KP)=LAT(ID,JD)+NTRT-NTR
      ELSE
      KEYPLT(KP)=IRCB((ID-1)*NTR+JD)+NTRT-NTR
      ENDIF
      ID=ID-1
      IF(ID.EQ.0) THEN
      ID=NBLK
      JD=JD-1
      ENDIF
      KD=(NCR+(JD-1)*NC+NC/2)*NROWS+NRR+(ID-1)*NR+NR/2+1
      IF(JD.EQ.0) KD=0
      ELSE
      KEYPLT(KP)=KEYPLT(K1)
      K1=K1-1
      ENDIF
      KP=KP-1
 25   CONTINUE
 23   CONTINUE
C ***** OPTIONAL LOGBOOK PRINT OUT *********************************
      IF(LGBK.NE.0.AND.NTRLS.EQ.1) THEN
C  SET UP HEADINGS FOR PLOT FILE
      CDES(1)='H '//TITLE
      WRITE(CDES(2),100) 'H',NTRT,NTR,NBLK
 100  FORMAT(A,' AUGMENTED DESIGN FOR ',I3,' ENTRIES WITH',I3,
     1' REPLICATED',I3,' TIMES')
      WRITE(CDES(3),101) NPLOTS,NROWS,NCOLS,CTMP(1:LEN_TRIM(CTMP))
 101  FORMAT('H LAYOUT IS',I4,' PLOTS,',I3,' BY',I3,
     1' WITH IMBEDDED ',A)
      CDES(6)='V003 NREP 1 FOR REPLICATED ENTRIES, 0 FOR TEST ENTRIES'
      CDES(7)='V004 ENTRY ENTRY NUMBER'
      CDES(8)='V005 ROW ROW IN FIELD PLAN'
      CDES(9)='V006 COL COLUMN IN FIELD PLAN'
      VDES(3)='    NREP'
      VDES(4)='   ENTRY'
      VDES(5)='     ROW'
      VDES(6)='     COL'
      IF (NREP.GT.0) THEN
      CDES(8)='V005 BLK/ROW ROW IN FIELD PLAN'
      VDES(5)=' BLK/ROW'
      ENDIF
C     open(4,file='pbdgn.csv',IOSTAT=IER)
C      CALL CREATE(TRIM(FNM)//'.SYS',0,4,99,3,IER,*99)
C      IF(IER.NE.0)
C     1 CALL ERTN('CREATE ERROR ON LAYOUT FILE',IER,*99)
       write(4,'(10(A,1H,))',IOSTAT=IER) 'TRIAL','PLOT','REP',
     1'ENTRY','ROW','COL'
C      CALL FILESYS(LU4,6,1,9,VDES,CDES,IER)
      IF(IER.NE.0) CALL ERTN('WRITE ERROR FROM FILESYS',IER,*99)
      IREC=0
      ENDIF
      IF(LGBK.NE.0) THEN
      IISRP=ISRP
      DO 73 II=1,NROWS
      IISRP=IISRP*ISRP
      DO 74 JJ=1,NCOLS
      J=JJ
      IF(IISRP.EQ.-1) J=NCOLS-JJ+1
      I=0
      IF(KEYPLT((J-1)*NROWS+II).GT.NTRT-NTR) I=1
      X(1)=FLOAT(NTRLS)
      X(2)=FLOAT((II-1)*NCOLS+J)
      X(3)=FLOAT(I)
      X(4)=FLOAT(KEYPLT((J-1)*NROWS+II))
      X(5)=FLOAT(II)
      X(6)=FLOAT(J)
      write(4,'(10(I5,1H,))') NTRLS,(II-1)*NCOLS+J,I,
     1KEYPLT((J-1)*NROWS+II),II,J
C      CALL WSYS(LU4,1,6,0,X,XX,CTMP,VDES,IREC)
  74  CONTINUE
  73  CONTINUE
      ENDIF
C
C  WRITE OUT THE TREATMENT KEY
C
      WRITE(LU2,139) TITLE,NTRLS
 139  FORMAT(' TRIAL DESCRIPTION: ',A/' TRIAL NUMBER:',I3/
     1' TRT    DESIGNATION',9X,'PLOT ROW COL')
      DO 21 I=1,NTRT
      NI=0
C  NOTE KEYPLT IS IN COLUMN ORDER BUT PLOTS ARE NUMBERED BY ROWS
      DO 22 JR=1,NROWS
      DO 22 JC=1,NCOLS
      K=(JC-1)*NROWS+JR
      IF(KEYPLT(K).EQ.I) THEN
      NI=NI+1
      JTEMP1(NI)=(JR-1)*NCOLS+JC
      JTEMP2(NI)=JR
      JTEMP3(NI)=JC
      ENDIF
 22   CONTINUE
      WRITE(LU2,140) I,(JTEMP1(J),JTEMP2(J),JTEMP3(J),J=1,NI)
 21   CONTINUE
 140  FORMAT(I5,1X,22(1H.),10(I5,2I3))
C WRITE OUT THE FIELD PLAN
C      CALL TPAGE('FIELD PLAN:'//CDES(2)(2:),CMDF,
C     1	IDAY,ITIME,0,LU2,0,0,LINE)
C      WRITE(LU2,138) TITLE,NTRLS
C 138  FORMAT(' TRIAL DESCRIPTION: ',A/' TRIAL NUMBER:',I3/
C     1' PLOT NUMBERS ON TOP, TREATMENTS BELOW'/)
C      WRITE(LU2,142) 'ROW|',('---|',J=1,NCOLS)
C      DO 26 I=1,NROWS
C      WRITE(CTMP,'(I3,1H|)') I
C      WRITE(LU2,137) '   |',((I-1)*NCOLS+J,J=1,NCOLS)
C      WRITE(LU2,137) CTMP,(KEYPLT((J-1)*NROWS+I),J=1,NCOLS)
C      WRITE(LU2,142) '   |',('---|',J=1,NCOLS)
C 26   CONTINUE
C      WRITE(LU2,137) ' COL',(J,J=1,NCOLS)
C 137  FORMAT(1X,A4,50(I3,1H|))
C 142  FORMAT(1X,51A4)
      RETURN
 99   WRITE(99,'('' AUGMT'')')
      RETURN 1
      END
C******************************************************* GRB
C  PURPOSE:
C  TO PRODUCE RANDOMIZED BLOCK ARRANGEMENTS
C  DIMENSIONED FOR MAXIMUM OF 100 TREATMENTS AND 6 REPS
C------------------------------------------------------- GRB
      SUBROUTINE GRB(DSEED,*)
      PARAMETER (LU0=99,LU2=6,LU4=4)
      DOUBLE PRECISION DSEED,XX
      CHARACTER FNM*8,TITLE*72,CDES(9)*72,VDES(6)*12,CTMP*12
      COMMON/SET1/JTEMP(400)
      COMMON/SET2/IDSGN,ISEED,LGBK,FNM,ISRP,NTRL,NTRLS,
     1 NTRT,NSUB,NREP,NROWS,TITLE,NSQRS
      COMMON/SET3/KEYPLT(1000)
      COMMON/SET4/IREC,X(6),CDES,VDES
      IPLOT=0
      IF(LGBK.NE.0.AND.NTRLS.EQ.1) THEN
      CDES(1)='H '//TITLE
      WRITE(CDES(2),100) NTRT,NREP
 100  FORMAT('H RCB DESIGN FOR ',I3,' ENTRIES AND',I3,' BLOCKS')
      WRITE(CDES(3),101) ISEED
 101  FORMAT('H RANDOM SEED:',I12)
      CDES(6)='V003 REP BLOCK'
      CDES(7)='V004 ENTRY ENTRY NUMBER'
      VDES(3)='     REP'
      VDES(4)='   ENTRY'
C     open(4,file='pbdgn.csv',IOSTAT=IER)
C      CALL CREATE(TRIM(FNM)//'.SYS',0,4,99,3,IER,*99)
C       IF(IER.NE.0)
C     1 CALL ERTN('CREATE ERROR ON LAYOUT FILE',IER,*99)
       write(4,'(10(A,1H,))',IOSTAT=IER) 'TRIAL','PLOT','REP',
     1'ENTRY'
C      CALL FILESYS(LU4,4,1,7,VDES,CDES,IER)
      IF(IER.NE.0) CALL ERTN('WRITE ERROR FROM FILESYS',IER,*99)
      IREC=0
      ENDIF
      DO 30 IREP=1,NREP
      CALL GGPER(DSEED,NTRT,JTEMP)
      DO 30 ITRT=1,NTRT
      IPLOT=IPLOT+1
      IF(IPLOT.GT.1000) CALL ERTN('MAX 1000 PLOTS',IPLOT,*99)
C ***** PRINTS OUT LOGBOOK PLOT BY PLOT (OPTIONAL) *************
      IF(LGBK.EQ.0) GOTO 20
      X(1)=FLOAT(NTRLS)
      X(2)=FLOAT(IPLOT)
      X(3)=FLOAT(IREP)
      X(4)=FLOAT(JTEMP(ITRT))
      write(4,'(10(I5,1H,))') NTRLS,IPLOT,IREP,JTEMP(ITRT)
C      CALL WSYS(LU4,1,4,0,X,XX,CTMP,VDES,IREC)
   20 KEYPLT(IPLOT)=JTEMP(ITRT)
   30 CONTINUE
      RETURN
 99   WRITE(99,'('' GRB'')')
      RETURN 1
      END
C******************************************************* GSP
C  PURPOSE:
C  PRODUCES SPLIT-PLOT RANDOMISATIONS
C------------------------------------------------------- GSP
      SUBROUTINE GSP(DSEED,*)
      PARAMETER (LU0=99,LU2=6,LU4=4)
      DOUBLE PRECISION DSEED,XX
      DIMENSION IORDM(100)
      CHARACTER FNM*8,TITLE*72,CDES(9)*72,VDES(6)*12,CTMP*12
      COMMON/SET1/JTEMP(400)
      COMMON/SET2/IDSGN,ISEED,LGBK,FNM,ISRP,NTRL,NTRLS,
     1 NMAIN,NSUB,NREP,NROWS,TITLE,NSQRS
      COMMON/SET3/KEYPLT(1000)
      COMMON/SET4/IREC,X(6),CDES,VDES
      IF(NMAIN.GT.100) CALL ERTN('TOO MANY MP TREATMENTS',NMAIN,*99)
      NPLOT=0
      IF(LGBK.NE.0.AND.NTRLS.EQ.1) THEN
      CDES(1)='H '//TITLE
      WRITE(CDES(2),100) NMAIN,NSUB,NREP
 100  FORMAT('H SPLIT PLOT DESIGN FOR ',I3,' MP TRTS,'
     1,I3,' SUBP TRTS AND ',I3,' BLOCKS')
      WRITE(CDES(3),101) ISEED
 101  FORMAT('H RANDOM SEED:',I12)
      CDES(6)='V003 REP BLOCK'
      CDES(7)='V004 MAIN MAIN PLOT TREATMENT'
      CDES(8)='V005 SUBT SUB-PLOT TREATMENT'
      VDES(3)='     REP'
      VDES(4)='    MAIN'
      VDES(5)='    SUBT'
C     open(4,file='pbdgn.csv',IOSTAT=IER)
C      CALL CREATE(TRIM(FNM)//'.SYS',0,4,99,3,IER,*99)
C      IF(IER.NE.0)
C     1 CALL ERTN('CREATE ERROR ON LAYOUT FILE',IER,*99)
       write(4,'(10(A,1H,))',IOSTAT=IER) 'TRIAL','PLOT','REP',
     1'MAIN','SUBT'
C     CALL FILESYS(LU4,5,1,8,VDES,CDES,IER)
      IF(IER.NE.0) CALL ERTN('WRITE ERROR FROM FILESYS',IER,*99)
      IREC=0
      ENDIF
C
      DO 30 IREP=1,NREP
C******FIRST SHUFFLE THE ORDER OF MAIN TRTS IN THIS REP
      CALL GGPER(DSEED,NMAIN,JTEMP)
      DO 20 JJ=1,NMAIN
 20   IORDM(JJ)=JTEMP(JJ)
C****** SHUFFLE THE SUB-TRTS WITHIN THE 1ST,2ND,....MAIN TRTS IN TURN
      DO 30 KK=1,NMAIN
      CALL GGPER(DSEED,NSUB,JTEMP)
      DO 30 LL=1,NSUB
      NPLOT=NPLOT+1
      IF(NPLOT.GT.1000) CALL ERTN('TOO MANY PLOTS (MAX 1000)',NPLOT,*99)
      KEYPLT(NPLOT)=JTEMP(LL)+NSUB*(IORDM(KK)-1)
      IF(LGBK.EQ.0) GOTO 30
      X(1)=FLOAT(NTRLS)
      X(2)=FLOAT(NPLOT)
      X(3)=FLOAT(IREP)
      X(4)=FLOAT(IORDM(KK))
      X(5)=FLOAT(JTEMP(LL))
      write(4,'(10(I5,1H,))') NTRLS,NPLOT,IREP,IORDM(KK),JTEMP(LL)
C      CALL WSYS(LU4,1,5,0,X,XX,CTMP,VDES,IREC)
 30   CONTINUE
      RETURN
 99   WRITE(99,'('' GSP'')')
      RETURN 1
      END
C******************************************************* LTNSQD
C  PURPOSE:
C  LATIN SQUARE RANDOMISATION
C------------------------------------------------------- LTNSQD
      SUBROUTINE LTNSQD(DSEED,*)
      PARAMETER (LLU0=99,LU2=6,LU4=4)
      DOUBLE PRECISION DSEED,XX
      DIMENSION LINE(20)
      CHARACTER FNM*8,TITLE*72,CDES(9)*72,VDES(6)*12,CTMP
      COMMON/LDES/LAT(20,20),LSTND(20,20)
      COMMON/SET1/JTEMP1(100),JTEMP2(100),JTEMP3(200)
      COMMON/SET2/IDSGN,ISEED,LGBK,FNM,ISRP,NTRL,NTRLS,
     1 NTRT,NSUB,NREP,NROWS,TITLE,NSQRS
      COMMON/SET3/KEYPLT(1000)
      COMMON/SET4/IREC,X(6),CDES,VDES
C 124  WRITE(LU0,1)
C 1    FORMAT( ' YOU CAN HAVE UP TO 3 DISTINCT SQUARES')
C      WRITE(LU0,3)
C 3    FORMAT('  - ENTER THE NUMBER OF DISTINCT SQUARES')
C      NSQRS=NINPUT(LU1,-1,IER,LINE)
      IF(NTRT*NTRT*NSQRS.GT.1000)
     1 CALL ERTN('TOO MANY PLOTS (MAX 1000)',NTRT*NTRT*NSQRS,*99)
C
      IF(LGBK.NE.0.AND.NTRLS.EQ.1) THEN
      CDES(1)='H '//TITLE
      WRITE(CDES(2),100) NTRT,NSQRS
 100  FORMAT('H LATIN SQUARE DESIGN FOR',I4,
     1' ENTRIES WITH',I3,'SQUARES')
      WRITE(CDES(3),101) ISEED
 101  FORMAT('H RANDOM SEED:',I12)
      CDES(6)='V003 SQR SQUARE NUMBER'
      CDES(7)='V004 TRT TREATMENT NUMBER'
      CDES(8)='V005 ROW ROW IN FIELD PLAN'
      CDES(9)='V006 COL COLUMN IN FIELD PLAN'
      VDES(3)='     SQR'
      VDES(4)='     TRT'
      VDES(5)='     ROW'
      VDES(6)='     COL'
C     open(4,file='pbdgn.csv',IOSTAT=IER)      
C      CALL CREATE(TRIM(FNM)//'.SYS',0,4,99,3,IER,*99)
C      IF(IER.NE.0)
C     1 CALL ERTN('CREATE ERROR ON LAYOUT FILE',IER,*99)
       write(4,'(10(A,1H,))',IOSTAT=IER) 'TRIAL','PLOT','SQR',
     1'TRT','ROW','COL'
C      CALL FILESYS(LU4,6,1,9,VDES,CDES,IER)
      IF(IER.NE.0) CALL ERTN('WRITE ERROR FROM FILESYS',IER,*99)
      IREC=0
      ENDIF
C ***** ROUND THE 102 LOOP ONCE FOR EACH REPETITION OF BASIC PLAN **
      IPLOT=0
      DO 102 INUM=1,NSQRS
C ***** RANDOMISE TRTS ROWS AND COLS
      CALL GGPER(DSEED,NTRT,JTEMP1)
      CALL GGPER(DSEED,NTRT,JTEMP2)
      CALL GGPER(DSEED,NTRT,JTEMP3)
      DO 55 I=1,NTRT
      DO 55 J=1,NTRT
      IPLOT=IPLOT+1
      LAT(I,J)=JTEMP1(MOD(JTEMP2(I)+JTEMP3(J),NTRT)+1)
      KEYPLT(IPLOT)=LAT(I,J)
 55   CONTINUE
C ***** OPTIONAL LOGBOOK PRINT OUT *********************************
      IF(LGBK.EQ.0) GOTO 275
      DO 273 II=1,NTRT
      ISTART=1
      IEND=NTRT
      ISTEP=1
      IF(ISRP.EQ.0)GO TO 274
      IF(MOD(II,2).NE.0)GO TO 274
      ISTART=NTRT
      IEND=1
      ISTEP=-1
 274  DO 276 JJ=ISTART,IEND,ISTEP
      ISPLOT=(INUM-1)*NTRT*NTRT+(II-1)*NTRT+JJ
      X(1)=FLOAT(NTRLS)
      X(2)=FLOAT(ISPLOT)
      X(3)=FLOAT(INUM)
      X(4)=FLOAT(LAT(II,JJ))
      X(5)=FLOAT(II)
      X(6)=FLOAT(JJ)
      write(4,'(10(I5,1H,))') NTRLS,ISPLOT,INUM,LAT(II,JJ),II,JJ      
C      CALL WSYS(LU4,1,6,0,X,XX,CTMP,VDES,IREC)
  276 CONTINUE
  273 CONTINUE
  275 CONTINUE
  102 CONTINUE
      RETURN
 99   WRITE(99,'('' LTNSQD'')')
      RETURN 1
      END
C******************************************************* GLT
C  PURPOSE:
C  LATTICE BLOCK RANDOMISATION
C------------------------------------------------------- GLT
      SUBROUTINE GLT(NPPB,DSEED,*)
      PARAMETER (LU0=99,LU2=6,LU4=4)
      DOUBLE PRECISION DSEED
      INTEGER LINE(20)
      CHARACTER FNM*8,TITLE*72,CDES(9)*72,VDES(6)*12
      COMMON/LDES/LAT(20,20),LSTND(20,20)
      COMMON/SET1/JTEMP(400)
      COMMON/SET2/IDSGN,ISEED,LGBK,FNM,ISRP,NTRL,NTRLS,
     1 NTRT,NSUB,NREP,IDS,TITLE
      COMMON/SET3/KEYPLT(1000)
      COMMON/SET4/IREC,X(6),CDES,VDES
C ***** CHECK THAT RIGHT NUMBER OF REPS *********************
C ***** NPPB IS THE NUMBER OF PLOTS PER BLOCK ******************
      NPPB=SQRT(FLOAT(NTRT)+0.01)
C ***** RANDOMISE THE TRTS IN ARRAY LSTND ********************
      CALL GGPER(DSEED,NTRT,JTEMP)
      DO 10 J=1,NPPB
      DO 10 I=1,NPPB
 10   LSTND(I,J)=JTEMP(I+(J-1)*NPPB)
C ***** OPTIONAL LOGBOOK - PRINT HEADING ************************
      IF(LGBK.NE.0.AND.NTRLS.EQ.1) THEN
      CDES(1)='H '//TITLE
      WRITE(CDES(2),100) NTRT,NREP
 100  FORMAT('H RECTANGULAR LATTICE DESIGN FOR ',I3,' TRTS AND',
     1I3,' REPS')
      WRITE(CDES(3),101) ISEED
 101  FORMAT('H RANDOM SEED:',I12)
      CDES(6)='V003 REP REPLICATION'
      CDES(7)='V004 TRT TREATMENT'
      CDES(8)='V005 BLK BLOCK WITHIN REP'
      VDES(3)='     REP'
      VDES(4)='     TRT'
      VDES(5)='     BLK'
C     open(4,file='pbdgn.csv',IOSTAT=IER)
C      CALL CREATE(TRIM(FNM)//'.SYS',0,4,99,3,IER,*99)
C      IF(IER.NE.0)
C     1 CALL ERTN('CREATE ERROR ON LAYOUT FILE',IER,*99)
       write(4,'(10(A,1H,))',IOSTAT=IER) 'TRIAL','PLOT','REP',
     1'TRT','BLK'
C      CALL FILESYS(LU4,5,1,8,VDES,CDES,IER)
      IF(IER.NE.0) CALL ERTN('WRITE ERROR FROM FILESYS',IER,*99)
      IREC=0
      ENDIF
      IREP=0
      IBLK=0
      IPLOT=0
C ***** ROUND THE 100 LOOP ONCE FOR EACH REPETITION OF BASIC PLAN **
C      DO 100 INUM=1,INR
C ***** FIRST USE THE ROWS OF LSTND AS THE BLOCKS ***************
      DO 20 I=1,NPPB
      DO 20 J=1,NPPB
 20   LAT(I,J)=LSTND(I,J)
      CALL LWRITE(NPPB,NPPB,IREP,IPLOT,DSEED,*99)
C ***** NOW USE COLUMNS OF LSTND AS THE BLOCKS ****************
      DO 30 I=1,NPPB
      DO 30 J=1,NPPB
 30   LAT(I,J)=LSTND(J,I)
      CALL LWRITE(NPPB,NPPB,IREP,IPLOT,DSEED,*99)
      IF(IDS.EQ.2) RETURN
C***** BLOCKS DEFINED BY INTERACTION A X B (PSEUDOFACTORS)*****
      DO 40 I=1,NPPB
      DO 40 J=1,NPPB
 40   LAT(I,J)=LSTND(J,1+MOD((I+J-1),NPPB))
      CALL LWRITE(NPPB,NPPB,IREP,IPLOT,DSEED,*99)
      RETURN
  99  WRITE(99,'('' GLT'')')
      RETURN 1
      END
C******************************************************* RLAT
C  PURPOSE:
C  RECTANGULAR LATTICE RANDOMISATION
C  UP TO 6 REPS, 56 TREATMENTS - 24TH SEPTEMBER 1985
C------------------------------------------------------- RLAT
      SUBROUTINE RLAT(NBPR,NPPB,DSEED,*)
      PARAMETER (LU0=99,LU2=6,LU4=4)
      DOUBLE PRECISION DSEED
      CHARACTER FNM*8,TITLE*72,CDES(9)*72,VDES(6)*12
      COMMON/SET1/JTEMP(400)
      COMMON/SET2/IDSGN,ISEED,LGBK,FNM,ISRP,NTRL,NTRLS,
     1 NTRT,NSUB,NREP,NROWS,TITLE,NSQRS
      COMMON/LDES/LAT(20,20),LSTND(20,20)
      COMMON/SET3/KEYPLT(1000)
      COMMON/SET4/IREC,X(6),CDES,VDES
      DIMENSION IPLAN4(16),IPLAN5(25),IPLAN6(36),IPLAN7(49),IPLAN8(64)
C ***** EASIER TO STORE THE NECESSARY LATIN SQUARES THAN TO
C ***** GENERATE THEM!
      DATA IPLAN4/0,4,2,3,3,0,4,1,4,1,0,2,2,3,1,0/
      DATA IPLAN5/0,2,3,4,5,2,0,4,5,1,3,4,0,1,2,4,5,1,0,3,
     *            5,1,2,3,0/
      DATA IPLAN6/0,5,6,4,2,3,2,0,4,1,5,6,3,1,0,6,4,2,
     *            4,6,1,0,3,5,5,4,2,3,0,1,6,2,3,5,1,0/
      DATA IPLAN7/0,2,3,4,5,6,7,2,0,4,5,6,7,1,3,4,0,6,7,1,2,
     *            4,5,6,0,1,2,3,5,6,7,1,0,3,4,6,7,1,2,3,0,5,
     *            7,1,2,3,4,5,0/
      DATA IPLAN8/0,2,3,4,5,6,7,8,5,0,7,8,1,2,3,4,
     *            2,1,0,3,6,5,8,7,6,5,8,0,2,1,4,3,
     *            7,8,5,6,0,4,1,2,3,4,1,2,7,0,5,6,
     *            8,7,6,5,4,3,0,1,4,3,2,1,8,7,6,0/
      INR=1
      IDS=NREP
      NBPR=INT((SQRT(4.0*FLOAT(NTRT)+1.0)+1.0)/1.999)
C ***** NPPB IS THE NUMBER OF PLOTS PER BLOCK **************
      NPPB=NBPR-1
C ***** RANDOMISE THE TRTS IN ARRAY LSTND ********************
C ***** WITH ZEROS IN THE LEADING DIAGONAL ********************
      CALL GGPER(DSEED,NTRT,JTEMP)
      NTP=0
      DO 50 I=1,NBPR
      DO 50 J=1,NBPR
      IF(I.NE.J)GO TO 40
      LSTND(I,J)=0
      GO TO 50
   40 NTP=NTP+1
      LSTND(I,J)=JTEMP(NTP)
   50 CONTINUE
C ***** OPTIONAL LOGBOOK - PRINT HEADING ************************
      IF(LGBK.NE.0.AND.NTRLS.EQ.1) THEN
      CDES(1)='H '//TITLE
      WRITE(CDES(2),100) NTRT,NREP
 100  FORMAT('H RECTANGULAR LATTICE DESIGN FOR ',I3,' TRTS AND',
     1I3,' REPS')
      WRITE(CDES(3),101) ISEED
 101  FORMAT('H RANDOM SEED:',I12)
      CDES(6)='V003 REP REPLICATION'
      CDES(7)='V004 TRT TREATMENT'
      CDES(8)='V005 BLK BLOCK WITHIN REP'
      VDES(3)='     REP'
      VDES(4)='     TRT'
      VDES(5)='     BLK'
C     open(4,file='pbdgn.csv',IOSTAT=IER)
C      CALL CREATE(TRIM(FNM)//'.SYS',0,4,99,3,IER,*99)
C      IF(IER.NE.0)
C     1 CALL ERTN('CREATE ERROR ON LAYOUT FILE',IER,*99)
      write(4,'(10(A,1H,))',IOSTAT=IER) 'TRIAL','PLOT','REP',
     1'TRT','BLK'
C      CALL FILESYS(LU4,5,1,8,VDES,CDES,IER)
      IF(IER.NE.0) CALL ERTN('WRITE ERROR FROM FILESYS',IER,*99)
      IREC=0
      ENDIF
      IREP=0
      IBLK=0
      IPLOT=0
C ***** ROUND THE 100 LOOP ONCE FOR EACH REPETITION OF BASIC PLAN **
      DO 91 INUM=1,INR
C ***** FIRST USE THE ROWS OF LSTND AS THE BLOCKS ***************
      DO 55 IB=1,NBPR
      KOUNTP=0
      DO 55 J=1,NBPR
      IF(LSTND(IB,J).EQ.0)GO TO 55
      KOUNTP=KOUNTP+1
      LAT(IB,KOUNTP)=LSTND(IB,J)
   55 CONTINUE
CDB   WRITE(LU0,961)((LAT(M,N),N=1,NPPB),M=1,NBPR)
      CALL LWRITE(NBPR,NPPB,IREP,IPLOT,DSEED,*99)
C ***** NOW USE COLUMNS OF LSTND AS THE BLOCKS ****************
      DO 60 IB=1,NBPR
      KOUNTP=0
      DO 60 J=1,NBPR
      IF(LSTND(J,IB).EQ.0)GO TO 60
      KOUNTP=KOUNTP+1
      LAT(IB,KOUNTP)=LSTND(J,IB)
   60 CONTINUE
CDB   WRITE(LU0,961)((LAT(M,N),N=1,NPPB),M=1,NBPR)
      CALL LWRITE(NBPR,NPPB,IREP,IPLOT,DSEED,*99)
      IF(IDS.EQ.2)GO TO 91
C***** BLOCKS DEFINED BY LATIN SQUARE *************
      NBPR2=NBPR*NBPR
CDB   WRITE(LU0,961)((LSTND(M,N),N=1,NBPR),M=1,NBPR)
CDB961FORMAT(8(1X,8I3,/))
      DO 90 IB=1,NBPR
      KOUNTP=0
C ***** SWEEP THRU IPLAN FOR POSITIONS MARKED IB ************
      DO 90 LOOP=1,NBPR2
      GO TO(99,99,72,74,76,78,80),NPPB
   72 IF(IPLAN4(LOOP).NE.IB)GO TO 90
      GO TO 85
   74 IF(IPLAN5(LOOP).NE.IB)GO TO 90
      GO TO 85
   76 IF(IPLAN6(LOOP).NE.IB)GO TO 90
      GO TO 85
   78 IF(IPLAN7(LOOP).NE.IB)GO TO 90
      GO TO 85
   80 IF(IPLAN8(LOOP).NE.IB)GO TO 90
   85 KOUNTP=KOUNTP+1
      IC=1+MOD((LOOP-1),NBPR)
      IR=1+(LOOP-IC)/NBPR
CDB   WRITE(LU0,942)IR,IC
CDB942FORMAT(' IR = ',I3,' IC = ',I3)
      LAT(IB,KOUNTP)=LSTND(IR,IC)
   90 CONTINUE
CDB   WRITE(LU0,961)((LAT(M,N),N=1,NPPB),M=1,NBPR)
      CALL LWRITE(NBPR,NPPB,IREP,IPLOT,DSEED,*99)
  91  CONTINUE
      RETURN
 99   WRITE(99,'('' RLAT'')')
      RETURN 1
      END
C******************************************************* LWRITE
C  PURPOSE:
C  SHUFFLES BLOCKS & TREATMENTS WITHIN ONE REP OF A LATTICE
C  OF SIZE NBPR X NPPB
C  NEEDED FOR LATTICE BLOCKS BECAUSE WE REPEATEDLY PRINT
C  ONE REPLICATE AT A TIME AFTER SHUFFLING
C  IF A SQUARE LATTICE, NBPR=NPPB
C  IF A RECTANGULAR LATTICE, NBPR=NPPB+1
C------------------------------------------------------- LWRITE
      SUBROUTINE LWRITE(NBPR,NPPB,IREP,IPLOT,DSEED,*)
      PARAMETER (LU2=6,LU4=4)
      DOUBLE PRECISION DSEED,XX
      DIMENSION IORDB(10)
      CHARACTER FNM*8,TITLE*72,CTMP*12,CDES(9)*72,VDES(6)*12
      COMMON/LDES/LAT(20,20),LSTND(20,20)
      COMMON/SET1/JTEMP(400)
      COMMON/SET2/IDSGN,ISEED,LGBK,FNM,ISRP,NTRL,NTRLS,
     1 NTRT,NSUB,NREP,NROWS,TITLE,NSQRS
      COMMON/SET3/KEYPLT(1000)
      COMMON/SET4/IREC,X(6),CDES,VDES
      IBLK=0
      NTRT=NBPR*NPPB
      IREP=IREP+1
      CALL GGPER(DSEED,NBPR,JTEMP)
      DO 10 II=1,NBPR
 10   IORDB(II)=JTEMP(II)
      DO 30 KK=1,NBPR
      IBLK=IBLK+1
      CALL GGPER(DSEED,NPPB,JTEMP)
	J1=IPLOT+1
      DO 20 JJ=1,NPPB
      IPLOT=IPLOT+1
      IF(IPLOT.GT.300) CALL ERTN('TOO MANY PLOTS (MAX 300)',IPLOT,*99)
      ITRT=LAT(IORDB(KK),JTEMP(JJ))
C ***** LOGBOOK PRINT OUT (OPTIONAL)*****************************
      IF(LGBK.NE.0) THEN
      X(1)=FLOAT(NTRLS)
      X(2)=FLOAT(IPLOT)
      X(3)=FLOAT(IREP)
      X(4)=FLOAT(ITRT)
      X(5)=FLOAT(IBLK)
      write(4,'(10(I5,1H,))') NTRLS,IPLOT,IREP,ITRT,IBLK
C      CALL WSYS(LU4,1,5,0,X,XX,CTMP,VDES,IREC)
	ENDIF
C ***** FILL IN KEY MATRIX FOR DESIGN PLANS ****************
      KEYPLT(IPLOT)=ITRT
 20   CONTINUE
C      WRITE(LU2,100) KK,(KEYPLT(JJ),JJ=J1,IPLOT)
C 100  FORMAT(I4,6X,20I4)
 30   CONTINUE
      RETURN
 99   WRITE(99,'('' LWRITE'')')
      RETURN 1
      END
C******************************************************* GLSQ
C  PURPOSE:
C  TO PRODUCE LATTICE SQUARE RANDOMISATION
C  FOR 4 X 4, 5 X 5 AND 7 X 7 SQUARES
C  WE ADOPT THE CONFOUNDING (A,B),(A2,B2),(A3,B3) FOR 5X5
C  AND THE PROGRAM WORKS OUT THE CONFOUNDING ITSELF
C  ALSO LATTICE BLOCKS - JUST DERANDOMISE COLUMNS!
C  CAN ALSO OBTAIN SEMI-BALANCED SQUARES FROM FIRST HALF OF REPS
C------------------------------------------------------- GLSQ
      SUBROUTINE GLSQ(JNT,KEYLAT,DSEED,*)
      PARAMETER (LU0=99,LU2=6,LU4=4)
      DOUBLE PRECISION DSEED,XX
      CHARACTER FNM*8,TITLE*72,CDES(9)*72,VDES(6)*12,CTMP*12
      COMMON/SET1/JTEMP(400)
      COMMON/SET2/IDSGN,ISEED,LGBK,FNM,ISRP,NTRL,NTRLS,
     1 NTRT,NSUB,NREP,NROWS,TITLE,NSQRS
      COMMON/SET3/KEYPLT(1000)
      COMMON/SET4/IREC,X(6),CDES,VDES
      DIMENSION LSQ(9,9),LSQTMP(9,9),LINE(20)
      DIMENSION ISRND(6),ITRND(100),IRND(10),JRND(10)
      DIMENSION IPLAN4(4,4,5),IPLAN8(8,8,9),IPLAN9(9,9,5)
      DIMENSION IAR5(6),IBR5(6),IAC5(6),IBC5(6)
      DIMENSION IAR7(8),IBR7(8),IAC7(8),IBC7(8)
C ***** IPLAN4 = ELEMENTS OF THE FIVE 4 X 4 SQUARES ******
C ***** (FROM COCHRAN AND COX PAGE 497)
C *****      ORDER OF MAPPING IS (ROW,COL,SQUARE) **********
      DATA IPLAN4/1,5,9,13,2,6,10,14,3,7,11,15,4,8,12,16,
     *            1,2,3,4,6,5,8,7,11,12,9,10,16,15,14,13,
     *            1,11,16,6,12,2,5,15,14,8,3,9,7,13,10,4,
     *            1,7,12,14,8,2,13,11,10,16,3,5,15,9,6,4,
     *            1,10,15,8,9,2,7,16,13,6,3,12,5,14,11,4/
      DATA IPLAN8/ 1, 9,17,25,33,41,49,57
     1           , 2,10,18,26,34,42,50,58
     1           , 3,11,19,27,35,43,51,59
     1           , 4,12,20,28,36,44,52,60
     1           , 5,13,21,29,37,45,53,61
     1           , 6,14,22,30,38,46,54,62
     1           , 7,15,23,31,39,47,55,63
     1           , 8,16,24,32,40,48,56,64
     2           , 1,10,19,28,37,46,55,64
     2           , 9, 2,51,44,61,30,23,40
     2           ,17,50, 3,36,29,62,15,48
     2           ,25,42,35, 4,21,14,63,56
     2           ,33,58,27,20, 5,54,47,16
     2           ,41,26,59,12,53, 6,39,24
     2           ,49,18,11,60,45,38, 7,32
     2           ,57,34,43,52,13,22,31, 8
     3           , 1,44,62,56,27,39,18,13
     3           ,46, 2,17,35,16,53,60,31
     3           ,64,23, 3,25,54,12,45,34
     3           ,55,40,29, 4,58,41,11,22
     3           ,28, 9,50,63, 5,24,38,43
     3           ,37,51,15,42,20, 6,32,57
     3           ,19,61,48,14,33,26, 7,52
     3           ,10,30,36,21,47,59,49, 8
     4           , 1,60,54,40,43,15,26,21
     4           ,62, 2,25,11,24,37,52,47
     4           ,56,31, 3,41,38,20,61,10
     4           ,39,16,45, 4,50,57,19,30
     4           ,44,17,34,55, 5,32,14,50
     4           ,13,35,23,58,28, 6,48,49
     4           ,27,53,64,22, 9,42, 7,36
     4           ,18,46,12,29,63,51,33, 8
     5           , 1,11,20,30,34,48,53,63
     5           ,15, 2,56,45,59,28,22,33
     5           ,21,52, 3,39,32,58, 9,46
     5           ,26,47,38, 4,17,13,64,51
     5           ,40,62,31,19, 5,49,42,12
     5           ,43,25,61,16,55, 6,36,18
     5           ,54,24,10,57,44,35, 7,29
     5           ,60,37,41,50,14,23,27, 8
     6           , 1,59,52,38,42,16,29,23
     6           ,63, 2,32,13,19,36,54,41
     6           ,53,28, 3,47,40,18,57,14
     6           ,34,15,46, 4,49,61,24,27
     6           ,48,22,39,51, 5,25,10,60
     6           ,11,33,21,64,31, 6,44,50
     6           ,30,56,58,17,12,43, 7,37
     6           ,20,45, 9,26,62,55,35, 8
     7           , 1,32,47,61,22,50,12,35
     7           ,29, 2,14,49,39,64,43,20
     7           ,42,13, 3,24,60,33,30,55
     7           ,59,54,18, 4,48,31,37, 9
     7           ,23,36,57,46, 5,11,56,26
     7           ,52,63,40,27,10, 6,17,45
     7           ,16,41,28,34,51,21, 7,62
     7           ,38,19,53,15,25,44,58, 8
     8           , 1,14,24,31,36,45,51,58
     8           ,12, 2,55,48,57,27,21,38
     8           ,22,49, 3,37,26,63,16,44
     8           ,32,43,33, 4,23,10,62,53
     8           ,35,64,30,18, 5,52,41,15
     8           ,47,29,60, 9,56, 6,34,19
     8           ,50,20,13,59,46,40, 7,25
     8           ,61,39,42,54,11,17,28, 8
     9           , 1, 2, 3, 4, 5, 6, 7, 8
     9           ,14,12,16,10,15, 9,13,11
     9           ,24,21,22,23,18,19,20,17
     9           ,31,27,26,32,30,29,25,28
     9           ,36,38,37,33,35,34,40,39
     9           ,45,48,44,43,41,47,46,42
     9           ,51,55,49,53,52,56,50,54
     9           ,58,57,63,62,64,60,59,61/
      DATA IPLAN9/ 1, 2, 3, 4, 5, 6, 7, 8, 9
     1           ,10,11,12,13,14,15,16,17,18
     1           ,19,20,21,22,23,24,25,26,27
     1           ,28,29,30,31,32,33,34,35,36
     1           ,37,38,39,40,41,42,43,44,45
     1           ,46,47,48,49,50,51,52,53,54
     1           ,55,56,57,58,59,60,61,62,63
     1           ,64,65,66,67,68,69,70,71,72
     1           ,73,74,75,76,77,78,79,80,81
     2           , 1,12,20,34,45,53,58,69,77
     2           ,21, 2,10,54,35,43,78,59,67
     2           ,11,19, 3,44,52,36,68,76,60
     2           ,61,72,80, 4,15,23,28,39,47
     2           ,81,62,70,24, 5,13,48,29,37
     2           ,71,79,63,14,22, 6,38,46,30
     2           ,31,42,50,55,66,74, 7,18,26
     2           ,51,32,40,75,56,64,27, 8,16
     2           ,41,49,33,65,73,57,17,25, 9
     3           , 1,57,29,16,72,44,22,78,50
     3           ,30, 2,55,45,17,70,51,23,76
     3           ,56,28, 3,71,43,18,77,49,24
     3           ,25,81,53, 4,60,32,10,66,38
     3           ,54,26,79,33, 5,58,39,11,64
     3           ,80,52,27,59,31, 6,65,37,12
     3           ,13,69,41,19,75,47, 7,63,35
     3           ,42,14,67,48,20,73,36, 8,61
     3           ,68,40,15,74,46,21,62,34, 9
     4           , 1,33,62,27,47,76,14,43,66
     4           ,63, 2,31,77,25,48,64,15,44
     4           ,32,61, 3,46,78,26,45,65,13
     4           ,17,37,69, 4,36,56,21,50,79
     4           ,67,18,38,57, 5,34,80,19,51
     4           ,39,68,16,35,55, 6,49,81,20
     4           ,24,53,73,11,40,72, 7,30,59
     4           ,74,22,54,70,12,41,60, 8,28
     4           ,52,75,23,42,71,10,29,58, 9
     5           , 1,60,35,18,65,40,23,79,48
     5           ,36, 2,58,41,16,66,46,24,80
     5           ,59,34, 3,64,42,17,81,47,22
     5           ,26,73,51, 4,63,29,12,68,43
     5           ,49,27,74,30, 5,61,44,10,69
     5           ,75,50,25,62,28, 6,67,45,11
     5           ,15,71,37,20,76,54, 7,57,32
     5           ,38,13,72,52,21,77,33, 8,55
     5           ,70,39,14,78,53,19,56,31, 9/
C ***** THESE DEFINE INTERACTIONS CONFOUNDED IN REPS(5X5) ******
      DATA IAR5/1,1,1,0,1,1/
      DATA IBR5/0,1,3,1,2,4/
      DATA IAC5/0,1,1,1,1,1/
      DATA IBC5/1,2,4,0,1,3/
C ***** THESE DEFINE INTERACTIONS CONFOUNDED IN REPS(7X7) ******
      DATA IAR7/1,0,1,1,1,1,1,1/
      DATA IBR7/0,1,1,2,3,4,5,6/
      DATA IAC7/1,1,1,1,1,0,1,1/
      DATA IBC7/3,4,5,6,0,1,1,2/
C ***** JNT = SIDE OF SQUARES (K IN TEXTBOOKS) ******************
      JNT=INT(SQRT(NTRT+0.001))
      IF(JNT.EQ.4.AND.NREP.GT.5) CALL ERTN('TOO MANY REPS',NREP,*99)
      IF(JNT.EQ.8.AND.NREP.GT.9) CALL ERTN('TOO MANY REPS',NREP,*99)
      IF(JNT.EQ.9.AND.NREP.GT.5) CALL ERTN('TOO MANY REPS',NREP,*99)
      IF(LGBK.EQ.0) GO TO 299
C ***** RANDOMISE THE TREATMENTS IN THE VECTOR ITRND ************
 299  CALL GGPER(DSEED,NTRT,JTEMP)
      DO 200 II=1,NTRT
  200 ITRND(II)=JTEMP(II)
C ***** GET A RANDOMISATION (ISRND) OF THE SQUARES 1 TO NREP ****
      CALL GGPER(DSEED,NREP,JTEMP)
      DO 205 JJ=1,NREP
  205 ISRND(JJ)=JTEMP(JJ)
C ****** NOW PRODUCE THE DIFFERENT SQUARES **********************
C     FOR 4 X 4, 8 X 8 AND 9 X 9 : SHUFFLE THE PLAN FROM C AND C
C     FOR 5 X 5 AND 7 X 7:
C      FOR REP K WE CONFOUND INTERACTION A**IAR X B**IBR WITH
C      ROWS, AND A**IAC X B**IBC WITH COLS
C      USING THE ORIGINAL TRT NUMBERS - THEN WRITE OUT USING THE
C      SHUFFLING OF TRTS PRODUCED ABOVE
C ******************************************************************
      IF(LGBK.NE.0.AND.NTRLS.EQ.1) THEN
C ***** WRITE HEADER FOR LOGBOOK ********************************
      CTMP='BLOCK'
      IF(KEYLAT.EQ.2) CTMP='SQUARE'
      CDES(1)='H '//TITLE
      WRITE(CDES(2),100) TRIM(CTMP),NTRT,NREP
 100  FORMAT('H LATTICE ',A,' FOR ',I3,
     1' ENTRIES REPLICATED',I3,' TIMES')
      WRITE(CDES(3),101)
 101  FORMAT('H ')
      CDES(6)='V003 NREP REP NUMBER'
      CDES(7)='V004 ENTRY ENTRY NUMBER'
      CDES(8)='V005 BLK BLOCK WITHIN REP'
      CDES(9)='V006 PLT PLOT WITHIN BLOCK'
      VDES(3)='    NREP'
      VDES(4)='   ENTRY'
      VDES(5)='     BLK'
      VDES(6)='     PLT'
      IF(KEYLAT.EQ.2) THEN
      CDES(8)='V005 ROW ROW IN FIELD PLAN'
      CDES(9)='V006 COL COLUMN IN FIELD PLAN'
      VDES(5)='     ROW'
      VDES(6)='     COL'
      ENDIF
C     open(4,file='pbdgn.csv',IOSTAT=IER)
C      CALL CREATE(TRIM(FNM)//'.SYS',0,4,99,3,IER,*99)
C      IF(IER.NE.0)
C     1 CALL ERTN('CREATE ERROR ON DATA FILE',IER,*99)
C      CALL FILESYS(LU4,6,1,9,VDES,CDES,IER)
       write(4,'(10(A,1H,))',IOSTAT=IER) 'TRIAL','PLOT','REP',
     1'ENTRY','BLK','PLT'
      IF(IER.NE.0) CALL ERTN('WRITE ERROR FROM FILESYS',IER,*99)
      IREC=0
      ENDIF
C	IF(KEYLAT.EQ.1) WRITE (LU2,122) NTRLS,NREP,NTRT,JNT,JNT
C122   FORMAT(' TRIAL:',I3/' PLAN FOR'
C     2,I3,' REPS OF',I4,' TREATMENTS IN',I3,' BLOCKS OF'
C     3,I3,' PLOTS IN EACH REP')
C	IF(KEYLAT.EQ.2) WRITE (LU2,123) NTRLS,NREP,NTRT,JNT,JNT
C123   FORMAT(' TRIAL:',I3/' PLAN FOR'
C     2,I3,' REPS OF',I4,' TREATMENTS IN',I3,' ROWS AND'
C     3,I3,' COLS IN EACH REP')
      IPLOT=0
      DO 275 IREP=1,NREP
      ISR=ISRND(IREP)
C ***** ROWS AND COLS ARE NUMBERED 1 - JNT WITHIN  EACH REP ****
      IROW=0
      ICOL=0
C***** SHUFFLE ROW AND COL ORDERS (IRND AND JRND) ***************
      CALL GGPER(DSEED,JNT,JTEMP)
      DO 215 II=1,JNT
  215 IRND(II)=JTEMP(II)
      CALL GGPER(DSEED,JNT,JTEMP)
      DO 220 II=1,JNT
  220 JRND(II)=JTEMP(II)
      DO 240 II=1,JNT
      DO 240 JJ=1,JNT
      IF(JNT.EQ.5)GO TO 225
      IF(JNT.EQ.7)GO TO 230
C ***** FOR 4 X 4, 8 X 8 AND 9 X 9 SQUARES ************
      IR=IRND(II)
      IC=JRND(JJ)
      IF(JNT.EQ.4) IT=IPLAN4(II,JJ,ISR)
      IF(JNT.EQ.8) IT=IPLAN8(II,JJ,ISR)
      IF(JNT.EQ.9) IT=IPLAN9(II,JJ,ISR)
      GO TO 235
  225 IXA=1+MOD((IAR5(ISR)*(II-1)+IBR5(ISR)*(JJ-1)),JNT)
      IXB=1+MOD((IAC5(ISR)*(II-1)+IBC5(ISR)*(JJ-1)),JNT)
      IR=IRND(IXA)
      IC=JRND(IXB)
      IT=5*(II-1)+JJ
      GO TO 235
  230 IXA=1+MOD((IAR7(ISR)*(II-1)+IBR7(ISR)*(JJ-1)),JNT)
      IXB=1+MOD((IAC7(ISR)*(II-1)+IBC7(ISR)*(JJ-1)),JNT)
      IR=IRND(IXA)
      IC=JRND(IXB)
      IT=7*(II-1)+JJ
  235 LSQ(IR,IC)=IT
C ***** SHUFFLE TREATMENT IN ACCORDANCE WITH ITRND *********
      LSQ(IR,IC)=ITRND(LSQ(IR,IC))
  240 CONTINUE
C ***** WRITE OUT THIS REPLICATE TO PBDGN.OUT *********************
C ***** IF LATTICE BLOCKS - DERANDOMISE THE COLUMNS! ********
C      IF(KEYLAT.EQ.1) WRITE (LU2,113) IREP,(JJ,JJ=1,JNT)
C 113  FORMAT(/' REP',I3/' BLKPLOT=',I3,19I4)
C      IF(KEYLAT.EQ.2) WRITE (LU2,114) IREP,(JJ,JJ=1,JNT)
C 114  FORMAT(/' REP',I3/' ROWCOL =',I3,19I4)
      IF(KEYLAT.EQ.2)GO TO 255
      DO 245 II=1,JNT
      CALL GGPER(DSEED,JNT,JTEMP)
      DO 245 JJ=1,JNT
  245 LSQTMP(II,JJ)=LSQ(II,JTEMP(JJ))
      DO 250 II=1,JNT
      DO 250 JJ=1,JNT
  250 LSQ(II,JJ)=LSQTMP(II,JJ)
  255 DO 270 II=1,JNT
C      WRITE(LU2,256) II,(LSQ(II,JJ),JJ=1,JNT)
C  256 FORMAT(I4,6X,20I4)
      DO 270 JJ=1,JNT
      IPLOT=IPLOT+1
      IF(IPLOT.GT.300) CALL ERTN('TOO MANY PLOTS (MAX 300)',IPLOT,*99)
C ***** FILL IN THE KEY PLAN MATRIX *************************
  270 KEYPLT(IPLOT)=LSQ(II,JJ)
C ***** OPTIONAL LOGBOOK PRINT OUT *********************************
      IF(LGBK.EQ.0) GOTO 275
      DO 273 II=1,JNT
      ISTART=1
      IEND=JNT
      ISTEP=1
      IF(ISRP.EQ.0)GO TO 274
      IF(MOD(II,2).NE.0)GO TO 274
      ISTART=JNT
      IEND=1
      ISTEP=-1
 274  DO 276 JJ=ISTART,IEND,ISTEP
      ISPLOT=(IREP-1)*JNT*JNT+(II-1)*JNT+JJ
      X(1)=FLOAT(NTRLS)
      X(2)=FLOAT(ISPLOT)
      X(3)=FLOAT(IREP)
      X(4)=FLOAT(LSQ(II,JJ))
      X(5)=FLOAT(II)
      X(6)=FLOAT(JJ)
      write(4,'(10(I5,1H,))') NTRLS,ISPLOT,IREP,LSQ(II,JJ),II,JJ
C     CALL WSYS(LU4,1,6,0,X,XX,CTMP,VDES,IREC)
  276 CONTINUE
  273 CONTINUE
  275 CONTINUE
      RETURN
 99   WRITE(99,'('' GLSQ'')')
      RETURN 1
      END
C******************************************************* PRTP1
C  PURPOSE:
C  TO PRINT TREATMENT KEY (Treatment order with plots)
C  USES THE KEYPLT VECTOR IN REVERSE
C------------------------------------------------------- PRTP1
      SUBROUTINE PRTP1(*)
      PARAMETER (LU0=99,LU2=6)
      DIMENSION KEYTRT(1000)
      CHARACTER FNM*8,TITLE*72
      COMMON/SET2/IDSGN,ISEED,LGBK,FNM,ISRP,NTRL,NTRLS,
     1 NTRT,NSUB,NREP,NROWS,TITLE,NSQRS
      COMMON/SET3/KEYPLT(1000)
      CHARACTER IFMT1*26,IFMT2*34
      DATA IFMT1/'(/   32X, 6(3HREP,I2,3X,))'/
      DATA IFMT2/'(    5H  TRT,26X, 6(1X,7HPLOT   ))'/
      IFMT1(15:17)='REP'
      IF(IDSGN.EQ.6) IFMT1(15:17)='COL'
      MTRT=NTRT
      IF(IDSGN.EQ.2) NTRT=NTRT*NSUB
      NSEC=(NREP-1)/10+1
C ****** WORK OUT THE KEYTRT MATRIX FROM KEYPLT VECTOR ***********
      ISQR=0
 31   KOUNT=0
C DO IN SECTIONS OF 10 REPS
 	DO 1 ISEC=1,NSEC
	NREPF=(ISEC-1)*10+1
	NREPE=MIN(ISEC*10,NREP)
      WRITE(IFMT1(10:11),'(I2)') NREPE-NREPF+1
      IFMT2(18:19)=IFMT1(10:11)
      IF(IDSGN.EQ.6) WRITE(LU2,133) ISQR/(NREP*NTRT)+1
 133  FORMAT(/' SQUARE'I2,' (PLOTS ARE NUMBERED SEQUENTIALLY',
     1' ACROSS ROWS OF EACH SQUARE)'/)
      DO 10 KK=1,NREPE-NREPF+1
      DO 10 JJ=1,NTRT
      KOUNT=KOUNT+1
	II=KEYPLT(ISQR+KOUNT)+(KK-1)*NTRT
	IF(II.GT.1000) CALL ERTN('TOO MANY TREATMENTS',II,*99)
 10   KEYTRT(II)=ISQR+KOUNT
      WRITE(LU2,IFMT1)(JJ,JJ=NREPF,NREPE)
      WRITE(LU2,IFMT2)
      IF(IDSGN.NE.2) GOTO 15
      WRITE(LU2,130)
130   FORMAT(1H ,10H MAIN  SUB)
      IMAIN=1
      ISUB=0
 15   DO 30 ITRT=1,NTRT
      IF(IDSGN.EQ.2) GOTO 20
      WRITE(LU2,140) ITRT,(KEYTRT(ITRT+(LL-1)*NTRT),LL=1,NREPE-NREPF+1)
140   FORMAT(I5,1X,22(1H.),4X,10(I4,4X))
      GO TO 30
 20   ISUB=ISUB+1
      IF(ISUB.LE.NSUB)GO TO 25
      IMAIN=IMAIN+1
      ISUB=1
 25   WRITE(LU2,150)IMAIN,ISUB,(KEYTRT(ITRT+(LL-1)*NTRT),
     1 LL=1,NREPE-NREPF+1)
150   FORMAT(2I5,1X,17(1H.),4X,10(I4,4X))
 30   CONTINUE
 1    CONTINUE
      ISQR=ISQR+NREP*NTRT
      IF(IDSGN.EQ.6.AND.ISQR.LT.NSQRS*NREP*NTRT) GOTO 31
      NTRT=MTRT
      RETURN
 99   WRITE(99,'('' PRTP1'')')
      RETURN 1
      END
C******************************************************* PRTP3
C  PURPOSE:
C  TO PRINT OUT THE FIELD PLAN (PLOT order with treatments)
C
C  ARGUMENTS:
C  IREP = NUMBER OF REPLICATIONS
C  IROW = NUMBER OF ROWS OR BLOCKS PER REPLICATION
C  ICOL = NUMBER OF PLOTS PER ROW OR BLOCK
C         IF THE FOLLOWING VALUES ARE PASSED AS CHARACTER
C         CONSTANTS THEY NEED TO BE EXACTLY FOUR CHARACTERS LONG
C  CREP = FOUR CHARACTER REP OR GROUP TITLE
C  CROW = FOUR CHARACTER ROW TITLE
C  CCOL = FOUR CHARACTER COL TITLE
C  ISTYPE = 1 IF KEYPLT IS IN ROW ORDER WITHIN REPS
C           2 IF KEYPLT IS IN COL ORDER WITHIN REPS
C  TREATMENT NUMBERS ARE IN KEYPLT
C------------------------------------------------------- PRTP3
      SUBROUTINE PRTP3(IREP,IROW,ICOL,ISTYPE,CREP,CROW,CCOL,*)
      PARAMETER (LU0=99,LU2=6)
      CHARACTER CROW*4,CCOL*4,CREP*4,CTMP*12,SPACE*4
      COMMON/SET3/KEYPLT(1000)
	DATA SPACE /'    '/
	IF(ICOL.GT.50) CALL ERTN('TOO MANY COLUMNS TO PRINT',ICOL,*99)
	DO 3 I=1,IREP
      WRITE (LU2,100) CREP//SPACE,I
 100  FORMAT(/1X,A4,I3,
     1' (CELLS CONTAIN PLOT NUMBERS ON TOP, TREATMENTS BELOW)')
      WRITE(LU2,102) CCOL//SPACE,(K,K=1,ICOL)
      WRITE(LU2,103) CROW//SPACE,('---|',J=1,ICOL)
	DO 2 J=1,IROW
      WRITE(CTMP,'(I3,1H|)') J
	L=(I-1)*IROW*ICOL+(J-1)*ICOL
      WRITE(LU2,102) '   |',(L+K,K=1,ICOL)
	IF(ISTYPE.EQ.1)
     1WRITE(LU2,102)CTMP,(KEYPLT(K),K=L+1,L+ICOL)
	IF(ISTYPE.EQ.2)
     2WRITE(LU2,102)CTMP,(KEYPLT((I-1)*IROW*ICOL+(K-1)*IROW+J),K=1,ICOL)
	WRITE(LU2,103) '   |',('---|',K=1,ICOL)
  2   CONTINUE
  3   CONTINUE
 102  FORMAT(1X,A4,50(I3,1H|))
 103  FORMAT(1X,51A4)
      RETURN
 99   WRITE(99,'('' PRTP3'')')
      RETURN 1
      END
C*********************************************** GENALPHA
C  PURPOSE:
C  ALGORITHM FOR GENERATING ALPHA(0,1) DESIGNS
C
C  REFERENCE:
C  L.J.PATERSON AND H.D.PATTERSON. 1984.
C  AN ALGORITHM FOR GENERATING ALPHA-LATTICE DESIGNS
C  ARS COMBINATORIA, 16A, 87-98
C---- LAST UPDATE 12/02/03 --------------------- GENALPHA
      SUBROUTINE GENALPHA(EFFCY,PCTEF,MAXCON,*)
      PARAMETER (LU0=99,LOUT=6,LLOUT=9)
      INTEGER A2K,A2U,C1,CC,CNTRL,D3,LOCAL,H
      INTEGER AA,ST1,ST,FIRST,LAST,INF,DIG,DO,D2
      INTEGER OUT,P,Q,R,S,SQ,S1,S1KU,U,U1,VAR,X,Y
      INTEGER TRI,LBTRI,COUNT,ENOUGH
      INTEGER A,ASAVE
      INTEGER*2 LIST,TR,EE,N12
      DOUBLE PRECISION HM,HMUB,HMWUB,T1,T2,D,E,WK1,WK2,PCNTUB
      CHARACTER FNM*8,CWK*80
      COMMON/CB1/A(10,20)
      COMMON/SET2/IDSGN,ISEED,LGBK,FNM,ISRP,NTRL,NTRLS,
     1 VAR,K,R,NROWS,TITLE,NSQRS
      COMMON /CB4/L(10),NAVAIL(10,20),NUSED(10,20)
     */CB4A/ TR(8,20,100) /CB4B/ LIST(10,20,100)
     */CB5/CNTRL,NUM
     */CB7/LOCAL(650)
     */CB8/T1(10,10),T2(10,10),D(10),E(10),WK1(10),WK2(10)
     */CB9/HM,HMUB,HMWUB
     */CB10/EE(100,100),N12(20,100)
     */CB11/LBTRI
     */CB12/ASAVE(10,20)
     */CB14/DIG(8,20,100)
     */CB15/DO(20),D2(10,20),D3(10,20)
     */CB16/COUNT(10)
      DIMENSION SQ(100)
      DATA ENOUGH/300/
C
C     REMAINING LINES CHECK THAT R, K, AND V SATISFY THE
C     NECESSARY CONDITIONS FOR AN ALPHA DESIGN TO EXIST: SEE PAGE 89
C
      S=VAR/K
      IF(R.LT.2.OR.R.GT.10) 
     &CALL ERTN('ILLEGAL NO OF REPS (2-10 ALLOWED)',R,*99)
      IF(VAR.LT.4.OR.VAR.GT.600) 
     &CALL ERTN('ILLEGAL NO OF TRTS (4-600 ALLOWED)',VAR,*99)
      IF(K.LT.2.OR.K.GT.20) 
     &CALL ERTN('ILLEGAL BLOCK SIZE (2-20 ALLOWED)',K,*99)
      IF(S*K.NE.VAR) 
     &CALL ERTN('ILLEGAL BLOCK SIZE (MUST DIVIDE NO OF TRTS)',K,*99)
      IF(R.GE.S**2) 
     &CALL ERTN('TOO MANY REPS (MUST BE < BLK SIZE SQUARED)',R,*99)
      IF(S.GT.100) CALL ERTN('ILLEGAL NO OF BLKS (MAX 100)',S,*99)
  1   CNTRL=0
      INF=2*10**8
      MAXCON = 1
      DO 73 H = 1,10
  73  COUNT(H) = 0
  69  CONTINUE
      IF(K.LE.S**MAXCON) GOTO 70
      MAXCON=MAXCON+1
      GOTO69
  70  CONTINUE
      S1=S-1
      DO 2 J=1,K
      A(1,J)=0
  2   CONTINUE
      DO 3 H=1,R
      L(H)=INF
  3   CONTINUE
      IF(R.GT.2) GOTO 67
      TRI=0
      CALL RGUB(HMUB,TRI)
      GOTO72
  67  IF(MAXCON.GT.1) GOTO 71
      CALL SUBLB
      TRI=LBTRI
      CALL RGUB(HMUB,TRI)
      GOTO72
C
C     UPPER BOUND
C
  71  CALL UB(HMUB)
C
C     WORKING UPPER BOUND (BEST DESIGN SO FAR)
C
  72  HMWUB=0
C
C     FORMING SECOND ROW OF GENERATING ARRAY
C
      NUM=0
      IKS=K/S
      IREM=K-IKS*S
      IF(IKS.EQ.0) GOTO 62
      DO 60 X=1,S
      LAST=X*IKS
      FIRST=(X-1)*IKS+1
      DO 60 I=FIRST,LAST
      A(2,I)=X-1
  60  CONTINUE
      ST=IKS*S
      IF(ST.EQ.K) GOTO 66
      ST=ST+2
      ST1=ST-1
      DO 5 X=1,S
      N12(ST1,X)=0
C
C     N12 IS THE ARRAY DEFINED ON PAGE 93 OF PATERSON AND PATTERSON
C
  5   CONTINUE
      A(2,ST1)=0
      U=ST
      IF(ST1.EQ.K) GOTO 66
      IF(R.GE.3)GOTO6
      P=(IREM*(IREM-1))/(S-1)
      Q=IREM*(IREM-1)-P*(S-1)
      L(2)=Q*(P+1)**2+(S-1-Q)*P**2
      GOTO 6
  62  A(2,1)=0
      ST=2
      ST1=1
      U=2
      DO 63 X=1,S
      N12(1,X)=0
  63  CONTINUE
      IF(R.GE.3) GOTO 6
      P=(K*(K-1))/(S-1)
      Q=K*(K-1)-P*(S-1)
      L(2)=Q*(P+1)**2+(S-1-Q)*P**2
   6  U1=U-1
      AA=MODS(A(2,U1)+1)
      IF(AA.GT.S1-K+U)GOTO12
        S1KU=S1-K+U
      DO 7 X=AA,S1KU
C
C       EE IS THE ARRAY E DEFINED ON PAGE 93
C
      DO 23 Y=1,S
        EE(X,Y)=0
  23    CONTINUE
      DO 7 J=ST1,U1
        Y = MODS(X-A(2,J))
        EE(X,Y)=EE(X,Y)+1
        Y = MODS(A(2,J)-X)
        EE(X,Y)=EE(X,Y)+1
  7     CONTINUE
        I=0
C
C       SEE DISPLAYED FORMULA FOR SQ ON PAGE 93
C       FORMING OF LIST: SEE STEP 2.2
C
      DO 24 X=AA,S1KU
        SQ(X)=0
        DO 21 Y=1,S1
        NE = N12(U1,Y)+EE(X,Y)
        SQ(X)=SQ(X)+NE**2
  21    CONTINUE
        IF(SQ(X).GT.L(2))GOTO24
        I=I+1
        LIST(2,U,I)=X
  24    CONTINUE
      IF(I.EQ.0)GOTO12
C
C       NAVAIL(2,U) IS THE NUMBER STILL AVAILABLE FOR A(2,U),
C       RECORDED IN LIST(2,U,.)
C
        NAVAIL(2,U)=I
        NAV=NAVAIL(2,U)
        IF(NAV.EQ.1)GOTO10
        NAV1=NAV-1
C
C       ARRANGING THE AVAILABLE RESIDUES BY INCREASING ORDER OF SQ
C       SEE STEP 2.2(C)
C
        DO 9 I=1,NAV1
        J1=I
        I1=I+1
        DO 8 J=I1,NAV
        CC=LIST(2,U,J)
        C1=LIST(2,U,J1)
        IF(SQ(CC).GE.SQ(C1))GOTO8
        J1=J
  8     CONTINUE
        IF(J1.EQ.I)GOTO9
        Y=LIST(2,U,I)
        LIST(2,U,I)=LIST(2,U,J1)
        LIST(2,U,J1)=Y
  9     CONTINUE
C
C       CHOOSING THE NEXT ELEMENT FROM THE LIST: STEP 2.3
C
  10  NUSED(2,U)=0
  11    NUSED(2,U)=NUSED(2,U)+1
        N2U = NUSED(2,U)
        IF(N2U.GT.NAVAIL(2,U))GOTO12
        A(2,U)=LIST(2,U,N2U)
        COUNT(2) = COUNT(2)+1
        IF (COUNT(2).GT.ENOUGH) L(2) = L(2)+2
        DO 22 Y=1,S
        A2U = A(2,U)
        N12(U,Y)=N12(U1,Y)+EE(A2U,Y)
  22    CONTINUE
C
C       STEP 2.4
C
      IF(U.EQ.K)GOTO13
        U=U+1
        U1=U-1
        GOTO6
  12  IF(U.EQ.ST)GOTO15
      U=U-1
      U1=U-1
      AA=MODS(A(2,U1)+1)
      IF(AA.GT.S1-K+U) GOTO 12
      S1KU=S1-K+U
      DO 26 X=AA,S1KU
      DO 27 Y=1,S
      EE(X,Y)=0
   27 CONTINUE
      DO 26 J=ST1,U1
      Y=MODS(X-A(2,J))
      EE(X,Y)=EE(X,Y)+1
      Y=MODS(A(2,J)-X)
      EE(X,Y)=EE(X,Y)+1
  26  CONTINUE
      GOTO11
 13   A2K = A(2,K)
      IF(SQ(A2K).GT.L(2)) GOTO 11
      L(2)=SQ(A2K)
      COUNT(2) = 0
  66  IF(R.GE.3)GOTO20
      NUM=1
C
C     CALCULATES HARMONIC MEAN EFFICIENCY FACTOR,
C     AND COMPARES IT WITH THAT OF THE BEST DESIGN SO FAR
C
      CALL HMEAN
      IF(HM-HMWUB.LT.1/10.**6) GOTO 11
      HMWUB=HM
      PCNTUB=100*HM/HMUB
      WRITE(LU0,108)HM,PCNTUB
  108 FORMAT(1X//1X,28HA DESIGN HAS BEEN FOUND WITH/
     *1X,40HHARMONIC MEAN EFFICIENCY FACTOR EQUAL TO,F9.6,1H,/
     *1X,8HWHICH IS,F7.2,20H% OF THE UPPER BOUND/)
      IX=IKS*S
      IF(IX.EQ.K.OR.IX.EQ.K-1) GOTO 15
      GOTO 18
C
C     NUM = 0 MEANS THAT NO DESIGNS HAVE BEEN FOUND
C
  15  IF(NUM.EQ.0)GOTO17
      DO 68 I=1,2
      DO 68 J=1,K
      ASAVE(I,J)=A(I,J)
  68  CONTINUE
      EFFCY=HM
      PCTEF=PCNTUB
      WRITE(LU0,112)
  112 FORMAT(1X,48HTHERE ARE NO MORE EFFICIENT DESIGNS OF THIS SIZE)
C32    CALL RNDALPHA(DSEED,*99)
  32  RETURN
  17  MAXCON=MAXCON+1
      GOTO70
C
C     STORE CURRENT DESIGN IN CASE NO BETTER DESIGN IS FOUND
C
18    DO 33 I=1,2
      DO 33 J=1,K
      ASAVE(I,J)=A(I,J)
  33  CONTINUE
      EFFCY=HM
      PCTEF=PCNTUB
	GOTO 32
C      IF (HM.GE.HMUB*0.99995) GO TO 32
C      WRITE(OUT,114)
C  114 FORMAT (1X,'DO YOU WANT TO SEARCH FOR A BETTER DESIGN')
C      CALL REPLY (ANS)
C      IF (ANS.EQ.NO) GO TO 32
C      GOTO11
C  19  RETURN
C
C     LOOKS FOR THIRD REPLICATE
C
  20  CALL ROWH(EFFCY,PCTEF,MAXCON,*99)
C
C     IF CNTRL=1 ON RETURN, NEEDS A NEW SECOND REPLICATE BEFORE
C     ANY FURTHER THIRD REPLICATES CAN BE FOUND; IF CNTRL=0,
C     USER HAS SPECIFIED THAT WANTS TO START ALL OVER AGAIN
C
      IF(NUM.EQ.0) GOTO 17
      IF(CNTRL.EQ.0) RETURN
      GOTO 11
 99   WRITE(99,'('' ALPHA'')')
      RETURN 1
      END
C******************************************************* ROWH
C  PURPOSE:
C  FINDS THIRD AND SUBSEQUENT REPLICATES. SEE PAGE 95                        
C------------------------------------------------------- ROWH	                                                                       
      SUBROUTINE ROWH(EFFCY,PCTEF,MAXCON,*)
	PARAMETER (LU0=99,LOUT=6,LOUTFIL=9)                                                   
      INTEGER AHU,CC,CNTRL,C1,D3,H,H1,H2                                        
      INTEGER OUT,VAR,R,S,S1,U,U1,X,Y                                               
      INTEGER D2,DIG,DO,ORDER                                                   
      INTEGER TRI,LBTRI,L3,COUNT,ENOUGH                                         
      INTEGER A,ASAVE                                                          
      INTEGER*2 N,NMAX,LIST,TR                                                  
      DOUBLE PRECISION HM,HMUB,HMWUB,HMTUB,PCNTUB
      COMMON/SET2/IDSGN,ISEED,LGBK,FNM(2),ISRP,NTRL,NTRLS,
     1 VAR,K,R,NROWS,TITLE,NSQRS                                                                 
      COMMON/CB1/A(10,20)                                                       
     */CB4/L(10),NAVAIL(10,20),NUSED(10,20)                                     
     */CB4A/ TR(8,20,100) /CB4B/ LIST(10,20,100)                                
     */CB5/CNTRL,NUM                                                     
     */CB7/N(100),NMAX(100,10),ORDER(100)                                       
     */CB9/HM,HMUB,HMWUB                                                        
     */CB11/LBTRI                                                               
     */CB12/ASAVE(10,20)                                                        
     */CB14/DIG(8,20,100)                                                       
     */CB15/DO(20),D2(10,20),D3(10,20)                                          
     */CB16/COUNT(10)
      DATA ENOUGH/300/                                                          
      DATA YES/1/,NO/0/
      S=VAR/K	                                                         
      INF=2*10**8                                                               
      INF1=21*10**7                                                             
      S1=S-1                                                                    
      DO 1 I=3,R                                                                
      A(I,1)=0                                                                  
  1   CONTINUE                                                                  
      D3(2,K)=0                                                                 
      D2(2,K)=0                                                                 
      IKS=K/S                                                                   
      IREM=K-IKS*S                                                              
       IX=(S*IKS*(IKS-1))/2+IREM*IKS                                            
       IF(IKS.GT.0)D2(2,K)=IX                                                   
      H=3                                                                       
  2   H1=H-1                                                                    
        H2=H-2                                                                  
        U=2                                                                     
         D3(H,1)=D3(H1,K)                                                       
         D2(H,1)=D2(H1,K)                                                       
         DO(1)=100000*D2(H,1)+D3(H,1)                                           
  3       U1=U-1                                                                
          DO 4 X=1,S                                                            
          TR(H2,U,X)=0                                                          
           DIG(H2,U,X)=0                                                        
           ORDER(X)=0                                                           
  4       CONTINUE                                                              
C                                                                               
C         FOR DEFINITION OF TR SEE PAGE 92                                      
C         TR EQUAL TO INFINITY RECORDS THOSE RESIDUES NOT AVAILABLE             
C         IF THE DESIGN IS TO BE (0,1)                                          
C                                                                               
          DO 6 I1=1,H2                                                          
          I11=I1+1                                                              
          DO 6 J1=1,U1                                                          
          DO 5 I2=I11,H1                                                        
          DO 5 J2=1,K                                                           
C                                                                               
C         SEE FORMULAS AT FOOT OF PAGE 6                                        
C                                                                               
          X = MODS(A(I2,U)+A(I1,J2)+A(H,J1)-A(I2,J2)-A(I1,J1))                  
          TR(H2,U,X)=TR(H2,U,X)+1                                               
          X = MODS(A(H,J1)+A(I2,J2)+A(I1,U)-A(I2,J1)-A(I1,J2))                  
          TR(H2,U,X)=TR(H2,U,X)+1                                               
  5       CONTINUE                                                              
C                                                                               
C         STEP H.2(A)                                                           
C                                                                               
  6       CONTINUE                                                              
      DO 606 I1=1,H1                                                            
      DO 616 X=1,S                                                              
      NMAX(X,I1)=0                                                              
  616 CONTINUE                                                                  
  606 CONTINUE                                                                  
          DO 60 J1=1,U1                                                         
          DO 61 X=1,S                                                           
          N(X)=0                                                                
  61      CONTINUE                                                              
          DO 62 I1=1,H1                                                         
          X=MODS(A(H,J1)+A(I1,U)-A(I1,J1))                                      
          DIG(H2,U,X)=DIG(H2,U,X)+1                                             
          N(X)=N(X)+1                                                           
      NMAX(X,I1)=NMAX(X,I1)+1                                                   
  62      CONTINUE                                                              
          DO 63 X=1,S                                                           
          IF(N(X).GE.MAXCON)DIG(H2,U,X)=INF1                                    
  63      CONTINUE                                                              
  60      CONTINUE                                                              
      DO 607 I1=1,H1                                                            
      DO 617 X=1,S                                                              
      IF (DIG(H2,U,X).GT.INF) GO TO 617                                         
      IF(NMAX(X,I1).GT.IKS)                                                     
     *DIG(H2,U,X)=DIG(H2,U,X)*(NMAX(X,I1)-IKS+1)                                
  617 CONTINUE                                                                  
  607 CONTINUE                                                                  
          I=0                                                                   
C                                                                               
C         FORM LIST OF RESIDUES STILL AVAILABLE FOR A(H,U),                     
C         IN LIST(H,U,.) (STEP H.2)                                             
C         NAVAIL(H,U) IS THE NUMBER OF THESE                                    
C                                                                               
          DO 7 X=1,S                                                            
           IF(DIG(H2,U,X).GE.INF)GOTO7                                          
           ORDER(X)=100000*DIG(H2,U,X)+TR(H2,U,X)                               
          IO=ORDER(X)+DO(U1)                                                    
          IF(IO.GT.L(H))GOTO7                                                   
          I=I+1                                                                 
          LIST(H,U,I)=X                                                         
  7       CONTINUE                                                              
          NAVAIL(H,U)=I                                                         
          NAV=NAVAIL(H,U)                                                       
          IF(NAV.EQ.1)GOTO10                                                    
          NAV1=NAV-1                                                            
C                                                                               
C         ARRANGE THE LIST BY ASCENDING ORDER OF ORDER (STEP H.2(C))            
C                                                                               
          DO 9 I=1,NAV1                                                         
          J1=I                                                                  
          I1=I+1                                                                
          DO 8 J=I1,NAV                                                         
          CC=LIST(H,U,J)                                                        
          C1=LIST(H,U,J1)                                                       
          IF(ORDER(CC).GE.ORDER(C1))GOTO8                                       
          J1=J                                                                  
  8       CONTINUE                                                              
          IF(J1.EQ.I)GOTO9                                                      
          Y=LIST(H,U,I)                                                         
          LIST(H,U,I)=LIST(H,U,J1)                                              
          LIST(H,U,J1)=Y                                                        
  9       CONTINUE                                                              
C                                                                               
C         NUSED(H,U) IS THE NUMBER USED FROM THE LIST SO FAR                    
C         SET A(H,U) EQUAL TO THE NEXT AVAILABLE ELEMENT OF THE LIST            
C         (STEP H.3)                                                            
C                                                                               
  10      NUSED(H,U)=0                                                          
  11      NUSED(H,U)=NUSED(H,U)+1                                               
          NHU = NUSED(H,U)                                                      
          IF(NHU.GT.NAVAIL(H,U))GOTO12                                          
          COUNT(H) = COUNT(H)+1                                                 
          IF (COUNT(H).GT.ENOUGH/R) MAXCON = MAXCON+1                           
          AHU=LIST(H,U,NHU)                                                     
          D3(H,U)=D3(H,U1)+TR(H2,U,AHU)                                         
           D2(H,U)=D2(H,U1)+DIG(H2,U,AHU)                                       
           DO(U)=100000*D2(H,U)+D3(H,U)                                         
           IF(AHU.EQ.S)AHU=0                                                    
          A(H,U) = AHU                                                          
          IF(U.EQ.K)GOTO13                                                      
          U=U+1                                                                 
          GOTO3                                                                 
  12    IF(U.EQ.2)GOTO21                                                        
        U=U-1                                                                   
         U1=U-1                                                                 
        GOTO11                                                                  
C                                                                               
C       STEP H.4                                                                
C                                                                               
  13    IF(DO(K).GT.L(H))GOTO11                                                 
        COUNT(H) = 0                                                            
        L(H)=DO(K)                                                              
        IF(H.EQ.R)GOTO17                                                        
        H=H+1                                                                   
        GOTO2                                                                   
  17  CALL HMEAN                                                                
C                                                                               
C     COMPARE HARMONIC MEAN EFFICIENCY FACTOR WITH THAT OF THE                  
C     BEST DESIGN SO FAR                                                        
C                                                                               
      NUM=1                                                                     
      IF(HM-HMWUB.LT.1/10.**6)GOTO11                                            
      HMWUB=HM                                                                  
      PCNTUB=100*HM/HMUB                                                        
      WRITE(LU0,102)HM,PCNTUB
C	WRITE(LOUT,102)HM,PCNTUB                                                   
  102 FORMAT(1X//1X,28HA DESIGN HAS BEEN FOUND WITH/                            
     *1X,40HHARMONIC MEAN EFFICIENCY FACTOR EQUAL TO,F9.6,1H,/                  
     *1X,8HWHICH IS,F7.2,20H% OF THE UPPER BOUND/)                              
C                                                                               
C     STORE CURRENT DESIGN IN CASE NO BETTER DESIGN IS FOUND                    
C                                                                               
      DO 26 I=1,R                                                               
      DO 26 J=1,K                                                               
      ASAVE(I,J)=A(I,J)                                                         
  26  CONTINUE                                                                  
      EFFCY=HM                                                                 
      PCTEF=PCNTUB                                                             
      IF (HM.GE.HMUB*0.99995) GO TO 24                                          
      IF(MAXCON.GT.1)GOTO23                                                     
      TRI=R*S*K*(K-1)*(K-2)+6*S*D3(R,K)                                         
      IF(R.GT.K)TRI=TRI+R*S*K*(R**2-3*R-K**2+3*K)                               
      CALL RGUB(HMTUB,TRI)                                                      
      IF(D3(R,K).GT.LBTRI)GOTO23                                                
      IF((HM-HMTUB)/HMTUB.LT.-0.001)GOTO23
	WRITE(LU0,118)                                      
C      WRITE(LOUT,118)
  118 FORMAT(1X,46HTHERE IS NOT MUCH ROOM FOR FURTHER IMPROVEMENT/)
C  23  WRITE(OUT,104)
C  104 FORMAT(1X,'DO YOU WANT TO SEARCH FOR A BETTER DESIGN')
C      CALL REPLY (ANS)
   23 ANS=NO
      IF (ANS.EQ.NO) GO TO 24
      CNTRL=1                                                                   
      IF(MAXCON.GT.1)GOTO29                                                     
C                                                                               
C     LOOK FOR A DESIGN WITH FEWER TRIANGLES IF CURRENT HM IS NEAR TO           
C     UPPER BOUND CORRESPONDING TO CURRENT NUMBER OF TRIANGLES.                 
C     (SEE PATERSON AND WILD (1986), SECTION 3.1)                              
C                                                                               
      IF((HM-HMTUB)/HMTUB.LT.-0.005)GOTO11                                      
      L3=D3(R,K)-1                                                              
      IF(L3.LT.LBTRI)GOTO11                                                     
      L(H)=L(H)-1                                                               
  29  U=K-1                                                                     
      U1=K-2                                                                    
      GOTO11                                                                    
C                                                                               
C     GOES BACK TO LOOK FOR EXTENSIONS OF A NEW SET OF FIRST H-1 REPLICA        
C     WHEN H IS 3, THIS MEANS RETURNING TO THE MAIN PROGRAMME TO LOOK FO        
C     A NEW SECOND REPLICATE.                                                   
C                                                                               
  21  IF(NUM.EQ.0)GOTO28                                                        
C      WRITE(OUT,119)
C  119 FORMAT(1X,35HNO BETTER DESIGN HAS YET BEEN FOUND/
C     *1X,'DO YOU WANT TO CONTINUE SEARCHING ')
C      CALL REPLY (ANS)
      ANS=NO
      IF (ANS.EQ.NO) GO TO 24                                                   
  28  IF(H.EQ.3)RETURN                                                          
      H=H-1                                                                     
      H1=H-1                                                                    
      H2=H-2                                                                    
      U=K                                                                       
      U1=K-1                                                                    
      GOTO11                                                                    
C 24    CALL RNDALPHA(DSEED,*99)                                                                
 24     CNTRL=0                                                                   
      RETURN
 99   WRITE(99,'('' ROWH'')')
      RETURN 1
      END
C*********************************************** MODS
C  PURPOSE:
C     CARRIES OUT MODULO S ARITHMETIC, REDUCING ALL INTEGERS
C     TO A NUMBER IN 1,2,...,S
C----------------------------------------------- MODS
      INTEGER FUNCTION MODS(J)
      INTEGER VAR,R,S,K,X
      COMMON/SET2/IDSGN,ISEED,LGBK,FNM(2),ISRP,NTRL,NTRLS,
     1 VAR,K,R,NROWS,TITLE,NSQRS
      S=VAR/K     	                                                           
      X = J                                                                     
  1   CONTINUE                                                                  
      IF(X.LE.0)GOTO2                                                           
      IF(X.GT.S)GOTO3                                                           
      GOTO4                                                                     
  2   X=X+S                                                                     
      GOTO1                                                                     
  3   X=X-S                                                                     
      GOTO1                                                                     
  4   MODS=X                                                                    
      RETURN                                                                    
      END
C*********************************************** HMEAN
C  PURPOSE:
C      CALCULATES THE HARMONIC MEAN EFFICIENCY FACTOR,
C      USING SIMPLIFICATIONS OF THE INFORMATION MATRIX DERIVED
C      IN PHD THESIS BY E.R.WILLIAMS (1975)
C     SEE ALSO JOHN, J.A. AND DEAN, A.M.:FACTORIAL EXPERIMENTS
C     IN GENERALIZED CYCLIC DESIGNS, JRSSB,1983,45,P.247
C----------------------------------------------- HMEAN
      SUBROUTINE HMEAN
      INTEGER ETA,H,R,RTEMP,R1,S,S1,U,VAR
      INTEGER A,ATEMP
      DOUBLE PRECISION T1,T2,D,E,WK1,WK2,HM,HMWUB,HMUB,SINV,RR,KK,SS
     *,UU,HH,EPS,TOL,PI
      COMMON/SET2/IDSGN,ISEED,LGBK,FNM(2),ISRP,NTRL,NTRLS,
     1 VAR,K,R,NROWS,TITLE,NSQRS
      COMMON/CB1/A(10,20)                                                       
     */CB7/ATEMP(20,20),ETA(100),INFILL(150)                                    
     */CB8/T1(10,10),T2(10,10),D(10),E(10),WK1(10),WK2(10)                      
     */CB9/HM,HMUB,HMWUB                                                        
	S=VAR/K
      S1=S-1                                                                    
      RTEMP=R                                                                   
      KTEMP=K                                                                   
      CALL MACON (EPS,TOL,PI)                                                   
      DO 12 I=1,R                                                               
      DO 12 J=1,K                                                               
      ATEMP(I,J)=A(I,J)                                                         
  12  CONTINUE
      IF(K.GE.R)GOTO10                                                          
      RTEMP=K                                                                   
      KTEMP=R                                                                   
      DO 11 I=1,K                                                               
      DO 11 J=1,R                                                               
      U=-A(J,I)                                                                 
      ATEMP(I,J)=MODS(U)                                                        
  11  CONTINUE                                                                  
  10  R1=RTEMP                                                                  
      RR=RTEMP                                                                  
      SS=S                                                                      
      KK=KTEMP                                                                  
C                                                                               
C     ETA(H)=NUMBER OF OCCURRENCES OF H AMONG A(I,L)-A(J,L)(MODS)               
C     0 INTERPRETED AS S                                                        
C                                                                               
      SINV=0                                                                    
C                                                                               
C     SEE SECTION 3.4 OF WILLIAMS' THESIS                                       
C
      DO 9 U=1,S1                                                               
      DO 7 I=1,RTEMP                                                            
      DO 6 J=1,RTEMP                                                            
      IF(I.EQ.J)GOTO5                                                           
      T1(I,J)=0                                                                 
      T2(I,J)=0                                                                 
      DO 1 H=1,S                                                                
      ETA(H)=0                                                                  
  1   CONTINUE                                                                  
      DO 2 L=1,KTEMP                                                            
      H=MODS(ATEMP(I,L)-ATEMP(J,L))                                             
      ETA(H)=ETA(H)+1                                                           
  2   CONTINUE                                                                  
      DO 4 H=1,S1                                                               
      UU=U                                                                      
      HH=H                                                                      
      T1(I,J)=T1(I,J)+(ETA(H)*DCOS(2*PI*UU*HH/SS))                              
      T2(I,J)=T2(I,J)+(ETA(H)*DSIN(2*PI*UU*HH/SS))                              
  4   CONTINUE                                                                  
      T1(I,J)=T1(I,J)+ETA(S)
      T1(I,J)=-T1(I,J)/(RR*KK)                                                  
      T2(I,J)=-T2(I,J)/(RR*KK)                                                  
      GOTO6                                                                     
  5   T1(I,J)=1-(1/RR)                                                          
      T2(I,J)=0                                                                 
  6   CONTINUE                                                                  
  7   CONTINUE                                                                  
      CALL F01BCF(R1,TOL,T1,10,T2,10,D,E,WK1,WK2)                               
      IFAIL = 0                                                                 
      CALL F02AVF(R1,EPS,D,E,IFAIL)                                             
      DO 8 I=1,RTEMP                                                            
      SINV=SINV+(D(I)**(-1))                                                    
  8   CONTINUE                                                                  
  9   CONTINUE                                                                  
      IF(K.GE.R)GOTO13                                                          
      HM=(K*S-1)/(K-1+SINV)                                                     
      GOTO14                                                                    
  13  HM=((KK*SS)-1)/(((KK-RR)*SS)+(RR-1)+SINV)                                 
  14  RETURN                                                                    
      END
C*********************************************** UB
C  PURPOSE:
C  UPPER BOUND FOR GENERAL ALPHA DESIGN:
C  FOR REFERENCES SEE PATERSON, WILD, AND WILLIAMS,
C  SECTION 3.4
C----------------------------------------------- UB
      SUBROUTINE UB(HMUB)
      INTEGER C,IH,K,L,R,S,VAR,IKT,G,Q                                                                  
      LOGICAL DUAL                                                              
      DOUBLE PRECISION HMUB,UP,U1,U3,U3S,U31,V,RR,SS,KK,                        
     *H,P,Y,LAMBDA,Z,F,UR,UQ                                                    
     *,H2,KT,RT
      COMMON/SET2/IDSGN,ISEED,LGBK,FNM(2),ISRP,NTRL,NTRLS,
     1 VAR,K,R,NROWS,TITLE,NSQRS
      S=VAR/K
      HMUB=1.0                                                                  
      DUAL=.FALSE.                                                              
      IF(R.LT.K)GOTO10                                                          
      V=S*K                                                                     
      RR=FLOAT(R)                                                               
      SS=FLOAT(S)                                                               
      KK=FLOAT(K)
      IF(R.LT.K)GOTO1                                                           
      UP=V*(KK-1)/(KK*(V-1))                                                    
      H=RR*KK*UP/V                                                              
      P=(V-1)*H                                                                 
      Y=V*P**2*(3*V-3-V*P-P)/(V-1)**2                                           
      IF(P.GT.V/2)Y=Y+V*P*(2*P-V)                                               
      U1=UP/(1+P*(V-1-P)/(V*H**2*(V-1)**2)+                                     
     *Y/(V**3*H**3*(V-1)))                                                      
      HMUB=U1                                                                   
      IF(UP.LT.U1)HMUB=UP                                                       
      HMUB=(RR*SS-1.0)/(SS*(RR-KK)+(SS*KK-1.0)/HMUB)                            
      IKT=R                                                                     
      R=K                                                                       
      K=IKT                                                                     
      DUAL=.TRUE.                                                               
  10  V=S*K                                                                     
      RR=FLOAT(R)                                                               
      KK=FLOAT(K)                                                               
      SS=FLOAT(S)                                                               
      UP=V*(KK-1)/(KK*(V-1))
  1   UQ=(V-1)/(V-1+RR*(SS-1)/(RR-1))                                           
      G=K/S                                                                     
      Q=K-S*G                                                                   
      LAMBDA=1/(KK*(RR-1))                                                      
      U3=1/(1/UQ+LAMBDA**2*RR*(RR-1)*Q*(SS-Q)/(V-1))                            
      Z=-RR*(RR-1)*(RR-2)*Q**3                                                  
      IF(G.EQ.0)Z=-RR*(RR-1)*(RR-2)*Q*(Q**2-SS)                                 
      IF(Q.GT.SS/2)Z=-RR*(RR-1)*(RR-2)*Q*(SS-Q)**2                              
      U3S=1/(1/UQ+LAMBDA**2*RR**2*Q*(SS-Q)/(V-1)+                               
     *LAMBDA**3*RR*Z/((RR-1)*(V-1)))                                            
      IF(U3.LT.HMUB)HMUB=U3                                                     
      IF(U3S.LT.HMUB)HMUB=U3S                                                   
      RT=RR                                                                     
      KT=KK                                                                     
      IF(R.NE.2)GOTO99                                                          
      L=Q*(Q-1)/(S-1)                                                           
      C=Q*(Q-1)-L*(S-1)                                                         
      F=2*SS*(Q**2+C*(L+1)**2+(SS-1-C)*L**2)-2*Q**4                             
      U31=1/(1/UQ+4*Q*(SS-Q)/(KK**2*(V-1))+2*F/(KK**4*(V-1)))                   
      UP2=1.0-Q*(SS-Q)/(KK*KK*(SS-1))
      H2=KK*KK*UP2/SS                                                           
      IH=H2                                                                     
      P2=(SS-1)*(H2-IH)                                                         
      Y=S*P2**2*(3*SS-3-SS*P2-P2)/((SS-1)**2)                                   
      IF(P2.GT.SS/2)Y=Y+SS*P2*(2*P2-SS)                                         
      U12=UP2/(1+P2*(SS-1-P2)/(SS*H2**2*(SS-1)**2)+                             
     *Y/(SS**3*H2**3*(SS-1)))                                                   
      UR=(V-1)/(V-2*SS+1+4*(SS-1)/U12)                                          
      IF(UR.LT.HMUB)HMUB=UR                                                     
      IF(U31.LT.HMUB)HMUB=U31                                                   
  99  CONTINUE                                                                  
      IF(DUAL)GOTO13                                                            
      RETURN                                                                    
  13  CONTINUE                                                                  
      HMUB=(SS*RR-1.0)/(SS*(RR-KK)+(KK*SS-1.0)/HMUB)                            
      IKT=R                                                                     
      R=K                                                                       
      K=IKT                                                                     
      RETURN                                                                    
      END
C*********************************************** RGUB
C  PURPOSE:
C  THIS SUBROUTINE IS FOR REGULAR-GRAPH DESIGNS ONLY
C  (I.E. FOR ALPHA(0,1) DESIGNS)
C  CALCULATES THE UPPER BOUND U2 FROM PATERSON, L.J. AND WILD, P.
C  (1986). TRIANGLES AND EFFICIENCY FACTORS, SECTION 2.3,
C  BIOMETRIKA, 73.
C  IF R IS GREATER THAN K, GO VIA DUAL AND CONVERT BACK AT END.
C  WHEN R = 2 USE BOUND FROM WILLIAMS, E.R. AND PATTERSON, H.D.
C  (1977). UPPER BOUNDS FOR EFFICIENCY FACTORS IN BLOCKS DESIGNS.
C  AUST. J. STATIST., 19, 194-201.
C----------------------------------------------- RGUB
      SUBROUTINE RGUB(HMUB,TRI)
      INTEGER C,IH,K,L,R,S,DUAL,TRI,VAR
      DOUBLE PRECISION HMUB,UP,U1,U31,V,RR,SS,KK
     *,H,P,Y,Z,F,UR,UQ,X,X1,S2,S3,S12,S13,B,M1,M2,U2
      COMMON/SET2/IDSGN,ISEED,LGBK,FNM(2),ISRP,NTRL,NTRLS,
     1 VAR,K,R,NROWS,TITLE,NSQRS
      S=VAR/K
      DUAL=0                                                                    
      IF(R.EQ.2)GOTO1                                                           
      IF(R.LE.K)GOTO2                                                           
      DUAL=1                                                                    
      IH=R                                                                      
      R=K                                                                       
      K=IH                                                                      
   2  V=S*K                                                                     
      B=S*R                                                                     
      RR=R                                                                      
      SS=S                                                                      
      KK=K                                                                      
      X=V*(KK-1)/(KK*(V-1))                                                     
      X1=((V-1)*X-(V-B+R-1))/(B-R)                                              
      M2=R*(K-1)                                                                
      M1=V-1-M2                                                                 
C                                                                               
C     UPPER BOUND U2                                                            
C                                                                               
      S2=M1*M2*V/((RR*KK)**2*(V-1))                                             
      S12=S2+(V-1)*(X**2-1)-(B-R)*(X1**2-1)                                     
      Z=(M2-1-TRI/(V*M2))/M1                                                    
      S3=M1*M2*V*((V-1)**2*Z-M2*V+M1)/((RR*KK)**3*(V-1)**2)                     
      S13=S3+3*X*S2-3*X1*S12+(V-1)*(X**3-1)-(B-R)*(X1**3-1)                     
      Y=S13+X1*S12                                                              
      IF(DABS(Y).GT.10**(-6.))GOTO 3                                            
      U2=X1                                                                     
      GOTO 4                                                                    
  3   U2=X1-S12**2/((B-R)*Y)                                                    
  4   U2=(V-1)/(V-B+R-1+(B-R)/U2)                                               
      HMUB=U2                                                                   
      IF(DUAL.EQ.0)RETURN                                                       
      HMUB=(B-1)/(B-V+(V-1)/HMUB)                                               
      IH=R                                                                      
      R=K                                                                       
      K=IH                                                                      
      RETURN                                                                    
C                                                                               
C     IF R=2 UPPER BOUND IS THE SMALLER OF U31 AND UR, FOR WHICH                
C     SEE PAGE 199 OF WILLIAMS AND PATTERSON (1977).                            
C                                                                               
  1   V=S*K                                                                     
      RR=R                                                                      
      SS=S                                                                      
      KK=K                                                                      
      UQ=(V-1)/(V-1+RR*(SS-1)/(RR-1))                                           
      L=K*(K-1)/(S-1)                                                           
      C=K*(K-1)-L*(S-1)                                                         
      F=2*SS*(KK**2+C*(L+1)**2+(SS-1-C)*L**2)-2*KK**4                           
      U31=1/(1/UQ+4*KK*(SS-KK)/(KK**2*(V-1))+2*F/(KK**4*(V-1)))                 
      UP=SS*(KK-1)/(KK*(SS-1))                                                  
      H=KK*(KK-1)/(SS-1)                                                        
      IH=H                                                                      
      P=(SS-1)*(H-IH)                                                           
      Y=S*P**2*(3*SS-3-SS*P-P)/((SS-1)**2)                                      
      IF(P.GT.SS/2)Y=Y+SS*P*(2*P-SS)                                            
      U1=UP/(1+P*(SS-1-P)/(SS*H**2*(SS-1)**2)+                                  
     *Y/(SS**3*H**3*(SS-1)))                                                    
      UR=(V-1)/(V-2*SS+1+4*(SS-1)/U1)                                           
      HMUB=UR                                                                   
      IF(U31.LT.UR)HMUB=U31                                                     
      RETURN
      END
C*********************************************** SUBLB
C  PURPOSE:
C  LOWER BOUNDS ON NUMBER OF TRIANGLES: PATERSON AND WILD (1985)
C  SECTIONS 3.2 AND 3.3 -- IN DESIGN WHEN R<=K; IN DUAL WHEN R>K.
C  CONVERTED INTO LOWER BOUND LBTRI ON D3(R,K) IN ROWH.
C----------------------------------------------- SUBLB
      SUBROUTINE SUBLB
      INTEGER VAR,R,S,K,I,MU,DUAL
      INTEGER LBTRI,L1,A1,A2
      COMMON/SET2/IDSGN,ISEED,LGBK,FNM(2),ISRP,NTRL,NTRLS,
     1 VAR,K,R,NROWS,TITLE,NSQRS
      COMMON /CB11/LBTRI
      S=VAR/K
      DUAL=0
      IF(R.LE.K)GOTO1
      DUAL=1
      I=R
      R=K
      K=I
   1  LBTRI=0
      L1=S*K*R*(K-1)*(2*R*(K-1)-S*K)
      IF(L1.LT.0)GOTO2
      LBTRI=L1
  2   A1=2*K-S-1
      IF(A1.LT.0)A1=0
      A1=R*S*K*(K-1)*(K-2)+S*R*(R-1)*(R-2)*K*A1
      IF(A1.GT.LBTRI)LBTRI=A1
      MU=((R-1)*(K-1))/(S-1)
      A2=MU*(R-1)*(K-1)-(MU*(MU+1)*(S-1))/2
      IF(A2.LT.0)A2=0
      A2=R*S*K*(K-1)*(K-2)+2*R*S*K*A2
      IF(A2.GT.LBTRI)LBTRI=A2
      IF(DUAL.EQ.0)RETURN
      I=R
      R=K
      K=I
      RETURN
      END
C*************************************************** RNDALPHA
C  PURPOSE:
C  RANDOMIZE ALPHA LATTICE DESIGNS AND PRODUCE LOGBOOK
C--------------------------------------------------- RNDALPHA
      SUBROUTINE RNDALPHA(DSEED,*)
	PARAMETER (LU0=99,LOUT=6,LU4=4)                                                   
      INTEGER ASAVE,VAR,R,S,K,H,I,J,G,D
C      INTEGER YES,NO,ONE,D,VC,NTRLS
      INTEGER DESIGN,RANDR,RANDK,RANDS,RANDT
      DOUBLE PRECISION DSEED,XX
C      LOGICAL RNDMZD
	CHARACTER FNM*8,TITLE*72,CTMP*80
      CHARACTER CDES(9)*72,VDES(6)*12
	COMMON/SET3/KEYPLT(1000)
      COMMON/SET4/IREC,X(6),CDES,VDES
      COMMON/SET2/IDSGN,ISEED,LGBK,FNM,ISRP,NTRL,NTRLS,
     1 VAR,K,R,NROWS,TITLE,NSQRS
      COMMON/CB12/ASAVE(10,20)
C     */CB5/CNTRL,NUM
     */CB7/DESIGN(20),RANDR(10),RANDK(20),RANDS(100),RANDT(500)
C      DATA ONE/1/
      S=VAR/K
	CALL GGPER(DSEED,VAR,RANDT)
      CALL GGPER(DSEED,R,RANDR)
	NS=0
      DO 41 IR = 1,R
      H = RANDR(IR)
      CALL GGPER(DSEED,S,RANDS)
      DO 42 IS = 1,S
      G = RANDS(IS)
      CALL GGPER(DSEED,K,RANDK)
      DO 43 IK = 1,K
      I = RANDK(IK)
      J = MODS(G+ASAVE(H,I)-1)
      IF (J.EQ.S) J = 0
      D = J+(I-1)*S+1
      DESIGN(IK) = RANDT(D)
	KEYPLT(VAR*(IR-1)+K*(IS-1)+IK)=DESIGN(IK)
43    CONTINUE
42    CONTINUE
41    CONTINUE
      IF(LGBK.NE.0.AND.NTRLS.EQ.1) THEN
C --- WRITE HEADER FOR LOGBOOK -----------------------------------------
      CDES(1)='H '//TITLE
      WRITE(CTMP,127) R,VAR,K
	CDES(2)=CTMP
 127  FORMAT('H ALPHA(0,1) LATTICE FOR ',I3,' REPS OF ',I3,
     1' ENTRIES IN BLOCKS OF',I3,' PLOTS')
      WRITE(CTMP,128)
	CDES(3)=CTMP
 128  FORMAT('H ')
      CDES(6)='V003 NREP REP NUMBER'
      CDES(7)='V004 ENTRY ENTRY NUMBER'
      CDES(8)='V005 BLK BLOCK WITHIN REP'
      CDES(9)='V006 PLT PLOT WITHIN BLOCK'
      VDES(3)='    NREP'
      VDES(4)='   ENTRY'
      VDES(5)='     BLK'
      VDES(6)='     PLT'
C     open(4,file='pbdgn.csv',IOSTAT=IER)
C      CALL CREATE(TRIM(FNM)//'.SYS',0,4,99,3,IER,*99)
C      IF(IER.NE.0)
C     1 CALL ERTN('CREATE ERROR ON DATA FILE',IER,*99)
       write(4,'(10(A,1H,))',IOSTAT=IER) 'TRIAL','PLOT','REP',
     1'ENTRY','BLK','PLT'
C      CALL FILESYS(LU4,6,1,9,VDES,CDES,IER)
      IF(IER.NE.0) CALL ERTN('WRITE ERROR FROM FILESYS',IER,*99)
	ENDIF
	NS=0
	DO I=1,R
	DO J=1,S
	DO IK=1,K
	NS=NS+1
	IF (LGBK.EQ.1) THEN
      X(1)=FLOAT(NTRLS)
      X(2)=FLOAT(NS)
      X(3)=FLOAT(I)
      X(4)=FLOAT(KEYPLT(NS))
      X(5)=FLOAT(J)
      X(6)=FLOAT(IK)
      write(4,'(10(I5,1H,))') NTRLS,NS,I,KEYPLT(NS),J,IK
C      CALL WSYS(LU4,1,6,0,X,XX,CTMP,VDES,IREC)
      ENDIF
	END DO
	END DO
	END DO
 90   RETURN
 99   WRITE(99,'('' PRINT'')')
      RETURN 1
      END
C*********************************************** F01BCF
C  PURPOSE:
C     THE ROUTINES IN THIS FILE, TO BE LOADED WITH FILE ALPHA,
C     ARE COPYRIGHT OF NAG LIBRARY, 7 BANBURY ROAD, OXFORD, U.K.
C     THEY ARE INCLUDED SUBJECT TO THE FOLLOWING CONDITIONS:
C     (1)  ANY PUBLISHED MATERIAL WHICH MAKES USE OF THIS PROGRAM
C          MUST ACKNOWLEDGE THE NAG LIBRARY;
C     (2)  THE NAG ROUTINES MUST NOT BE REMOVED FROM THE SOURCE-TEXT
C          FOR USE ELSEWHERE;
C     (3)  ANYONE TO WHOM THIS SOFTWARE IS MADE AVAILABLE MUST
C          UNDERTAKE TO ABIDE BY CONDITIONS (1) AND (2).
C
CUPTODATE F01BCFTEXT
      SUBROUTINE F01BCF(N, TOL, Z, IZ, W, IW, D, E, C, S)
C     MARK 3 RELEASE. NAG COPYRIGHT 1972.
C     MARK 4 REVISED.
C     MARK 4.5 REVISED
C     MARK 5C REVISED
C     MARK 6B REVISED  IER-125 IER-127 (SEP 1978)
      INTEGER N, II, I, L, K, J, J1, IZ, IW
      DOUBLE PRECISION G, FR, FI, H, R, CO, SI, TOL, GR, GI, F, HH,
     * Z(IZ,N), W(IW,N), D(N), E(N), C(N), S(N)
C
C     TRECX2
C     F01BCF REDUCES A COMPLEX*16 HERMITIAN MATRIX TO REAL
C     TRIDIAGONAL FORM FROM WHICH THE EIGENVALUES AND EIGENVECTORS
C     CAN BE FOUND USING SUBROUTINE F02AYF,(CXTQL2). THE HERMITIAN
C     MATRIX A=A(1) IS REDUCED TO THE TRIDIAGONAL MATRIX A(N-1) BY
C     N-2 UNITARY TRANSFORMATIONS. THE HOUSEHOLDER REDUCTION ITSELF
C     DOES NOT GIVE A REAL TRIDIAGONAL MATRIX, THE OFF-DIAGONAL                 
C     ELEMENTS ARE COMPLEX*16. THEY ARE SUBSEQUENTLY MADE REAL BY A             
C     DIAGONAL TRANSFORMATION.                                                  
C     APRIL 1ST. 1972                                                           
C                                                                               
      IF (N.EQ.1) GO TO 320                                                     
      DO 300 II=2,N                                                             
         I = N - II + 2                                                         
         L = I - 2                                                              
         G = 0.0D0                                                              
         FR = Z(I,I-1)                                                          
         FI = W(I,I-1)                                                          
         IF (L.EQ.0) GO TO 40                                                   
         DO 20 K=1,L                                                            
            G = G + Z(I,K)*Z(I,K) + W(I,K)*W(I,K)                               
   20    CONTINUE                                                               
   40    H = G + FR*FR + FI*FI                                                  
         IF (DABS(FR)+DABS(FI).NE.0.0D0) GO TO 60                               
         R = 0.0D0                                                              
         CO = 1.0D0                                                             
         C(I) = 1.0D0                                                           
         SI = 0.0D0                                                             
         S(I) = 0.0D0                                                           
         GO TO 120                                                              
   60    IF (DABS(FR).LT.DABS(FI)) GO TO 80                                     
         R = DABS(FR)*DSQRT(1.0D0+(FI/FR)**2)                                   
         GO TO 100                                                              
   80    R = DABS(FI)*DSQRT(1.0D0+(FR/FI)**2)                                   
  100    SI = FI/R                                                              
         S(I) = SI                                                              
         CO = FR/R                                                              
         C(I) = CO                                                              
  120    IF (G.LE.TOL) GO TO 260                                                
         L = L + 1                                                              
C     L IS NOW I-1                                                              
         G = -DSQRT(H)                                                          
         E(I) = G                                                               
C     E(I) HAS ITS FINAL REAL VALUE                                             
         H = H - R*G                                                            
C     S*S + SR                                                                  
         Z(I,I-1) = (R-G)*CO                                                    
         W(I,I-1) = (R-G)*SI                                                    
         FR = 0.0D0                                                             
         DO 200 J=1,L                                                           
            Z(J,I) = Z(I,J)/H                                                   
            W(J,I) = -W(I,J)/H                                                  
            GR = 0.0D0                                                          
            GI = 0.0D0                                                          
C     NOW FORM ELEMENT OF AU IN GR AND GI                                       
            DO 140 K=1,J                                                        
               GR = GR + Z(J,K)*Z(I,K) + W(J,K)*W(I,K)                          
               GI = GI - Z(J,K)*W(I,K) + W(J,K)*Z(I,K)                          
  140       CONTINUE                                                            
            J1 = J + 1                                                          
            IF (J1.GT.L) GO TO 180                                              
            DO 160 K=J1,L                                                       
               GR = GR + Z(K,J)*Z(I,K) - W(K,J)*W(I,K)                          
               GI = GI - Z(K,J)*W(I,K) - W(K,J)*Z(I,K)                          
  160       CONTINUE                                                            
C     NOW FORM ELEMENT OF P                                                     
  180       C(J) = GR/H                                                         
            S(J) = GI/H                                                         
C     C(J)+I S(J)= AU(J)/H= P(J)                                                
            FR = FR + GR*Z(J,I) + GI*W(J,I)                                     
C     WE MAKE THE ADDITION OF                                                   
C     AU(J)*UBAR(J)/H TO ACCUMULATING                                           
C     U(H)AU, WE NEED ONLY THE REAL PART                                        
  200    CONTINUE                                                               
         HH = FR/(H+H)                                                          
C     NOW FORM REDUCED A                                                        
         DO 240 J=1,L                                                           
            FR = Z(I,J)                                                         
            FI = -W(I,J)                                                        
            GR = C(J) - HH*FR                                                   
            C(J) = GR                                                           
            GI = S(J) - HH*FI                                                   
            S(J) = GI                                                           
C     F= U(J), H= K, P(J)= -K*U(J) = Q(J)                                       
            DO 220 K=1,J                                                        
               Z(J,K) = Z(J,K) -FR*C(K) -FI*S(K) -GR*Z(I,K) +GI*W(I,K)          
               W(J,K) = W(J,K) +FR*S(K) -FI*C(K) -GR*W(I,K) -GI*Z(I,K)          
  220       CONTINUE                                                            
            W(J,J) = 0.0D0                                                      
  240    CONTINUE                                                               
C     A(J,K)= A(J,K)-U(J)*QBAR(K)-Q(J)*UBAR(K)                                  
C     = Z(J,K)                                                                  
C     = I W(J,K)-(FR+I FI)*(C(K)-I S(K)) -                                      
C     (GR+I GI)*(Z(I,K)+I W(I,K))                                               
         GO TO 280                                                              
  260    E(I) = R                                                               
         H = 0.0D0                                                              
  280    D(I) = H                                                               
  300 CONTINUE                                                                  
  320 D(1) = 0.0D0                                                              
      E(1) = 0.0D0                                                              
C     WE NOW FORM THE PRODUCT OF THE                                            
C     HOUSEHOLDER MATRICES, OVERWRITING                                         
C     ON Z AND W                                                                
      DO 440 I=1,N                                                              
         L = I - 1                                                              
         IF (D(I).EQ.0.0D0) GO TO 400                                           
         DO 380 J=1,L                                                           
            GR = 0.0D0                                                          
            GI = 0.0D0                                                          
            DO 340 K=1,L                                                        
               GR = GR + Z(I,K)*Z(K,J) - W(I,K)*W(K,J)                          
               GI = GI + W(I,K)*Z(K,J) + Z(I,K)*W(K,J)                          
  340       CONTINUE                                                            
C     WE HAVE JUST FORMED U(H)X(J)                                              
            DO 360 K=1,L                                                        
               Z(K,J) = Z(K,J) - GR*Z(K,I) + GI*W(K,I)                          
               W(K,J) = W(K,J) - GR*W(K,I) - GI*Z(K,I)                          
  360       CONTINUE                                                            
C     WE HAVE JUST SUBTRACTED U(H)X(J)*U/H                                      
  380    CONTINUE                                                               
  400    D(I) = Z(I,I)                                                          
         Z(I,I) = 1.0D0                                                         
         W(I,I) = 0.0D0                                                         
         IF (L.EQ.0) GO TO 440                                                  
         DO 420 J=1,L                                                           
            Z(I,J) = 0.0D0                                                      
            Z(J,I) = 0.0D0                                                      
            W(I,J) = 0.0D0                                                      
            W(J,I) = 0.0D0                                                      
  420    CONTINUE                                                               
  440 CONTINUE                                                                  
C     NOW WE MULTIPLY BY THE                                                    
C     COSTHETA + I SINTHETA COLUMN                                              
C     FACTORS                                                                   
      CO = 1.0D0                                                                
      SI = 0.0D0                                                                
      IF (N.EQ.1) RETURN                                                        
      DO 480 I=2,N                                                              
         F = CO*C(I) - SI*S(I)                                                  
         SI = CO*S(I) + SI*C(I)                                                 
         CO = F                                                                 
         DO 460 J=1,N                                                           
            F = Z(J,I)*CO - W(J,I)*SI                                           
            W(J,I) = Z(J,I)*SI + W(J,I)*CO                                      
            Z(J,I) = F                                                          
  460    CONTINUE                                                               
  480 CONTINUE                                                                  
      RETURN                                                                    
      END
C* END OF F01BCFTEXT
C*********************************************** F02AVF
C  PURPOSE:
CUPTODATE F02AVFTEXT
C     MARK 2 RELEASE. NAG COPYRIGHT 1972
C     MARK 3 REVISED.
C     MARK 4 REVISED.
C     MARK 4.5 REVISED
C     MARK 9 REVISED. IER-326 (SEP 1981).
C
C     TQL1
C     THIS SUBROUTINE FINDS THE EIGENVALUES OF A TRIDIAGONAL
C     MATRIX,
C     T, GIVEN WITH ITS DIAGONAL ELEMENTS IN THE ARRAY D(N) AND
C     ITS SUBDIAGONAL ELEMENTS IN THE LAST N - 1 STORES OF THE
C     ARRAY E(N), USING QL TRANSFORMATIONS. THE EIGENVALUES ARE
C     OVERWRITTEN ON THE DIAGONAL ELEMENTS IN THE ARRAY D IN
C     ASCENDING ORDER. THE SUBROUTINE WILL FAIL IF ALL
C     EIGENVALUES TAKE MORE THAN 30*N ITERATIONS.
C     1ST APRIL 1972
C----------------------------------------------- F02AVF
      SUBROUTINE F02AVF(N, ACHEPS, D, E, IFAIL)
      INTEGER P01AAF, ISAVE, IFAIL, N, I, L, J, M, I1, M1, II
C$P 1
      DOUBLE PRECISION SRNAME
      DOUBLE PRECISION B, F, H, ACHEPS, G, P, R, C, S, D(N), E(N)
C *** SYSTEM-DEPENDENT FORM ***
C     DATA SRNAME /8H F02AVF /
      ISAVE = IFAIL
      IF (N.EQ.1) GO TO 40
      DO 20 I=2,N                                                               
         E(I-1) = E(I)                                                          
   20 CONTINUE                                                                  
   40 E(N) = 0.0D0                                                              
      B = 0.0D0                                                                 
      F = 0.0D0                                                                 
      J = 30*N                                                                  
      DO 340 L=1,N                                                              
         H = ACHEPS*(DABS(D(L))+DABS(E(L)))                                     
         IF (B.LT.H) B = H                                                      
C     LOOK FOR SMALL SUB DIAGONAL ELEMENT                                       
         DO 60 M=L,N                                                            
            IF (DABS(E(M)).LE.B) GO TO 80                                       
   60    CONTINUE                                                               
   80    IF (M.EQ.L) GO TO 260                                                  
  100    IF (J.LE.0) GO TO 360                                                  
         J = J - 1                                                              
C     FORM SHIFT                                                                
         G = D(L)                                                               
         H = D(L+1) - G                                                         
         IF (DABS(H).GE.DABS(E(L))) GO TO 120                                   
         P = H*0.5D0/E(L)                                                       
         R = DSQRT(P*P+1.0D0)                                                   
         H = P + R                                                              
         IF (P.LT.0.0D0) H = P - R                                              
         D(L) = E(L)/H                                                          
         GO TO 140                                                              
  120    P = 2.0D0*E(L)/H                                                       
         R = DSQRT(P*P+1.0D0)                                                   
         D(L) = E(L)*P/(1.0D0+R)                                                
  140    H = G - D(L)                                                           
         I1 = L + 1                                                             
         IF (I1.GT.N) GO TO 180                                                 
         DO 160 I=I1,N                                                          
            D(I) = D(I) - H                                                     
  160    CONTINUE                                                               
  180    F = F + H                                                              
C     QL TRANSFORMATION                                                         
         P = D(M)                                                               
         C = 1.0D0                                                              
         S = 0.0D0                                                              
         M1 = M - 1                                                             
         DO 240 II=L,M1                                                         
            I = M1 - II + L                                                     
            G = C*E(I)                                                          
            H = C*P                                                             
            IF (DABS(P).LT.DABS(E(I))) GO TO 200                                
            C = E(I)/P                                                          
            R = DSQRT(C*C+1.0D0)                                                
            E(I+1) = S*P*R                                                      
            S = C/R                                                             
            C = 1.0D0/R                                                         
            GO TO 220                                                           
  200       C = P/E(I)                                                          
            R = DSQRT(C*C+1.0D0)                                                
            E(I+1) = S*E(I)*R                                                   
            S = 1.0D0/R                                                         
            C = C/R                                                             
  220       P = C*D(I) - S*G                                                    
            D(I+1) = H + S*(C*G+S*D(I))                                         
  240    CONTINUE                                                               
         E(L) = S*P                                                             
         D(L) = C*P                                                             
         IF (DABS(E(L)).GT.B) GO TO 100                                         
  260    P = D(L) + F                                                           
C     ORDER EIGENVALUE                                                          
         IF (L.EQ.1) GO TO 300                                                  
         DO 280 II=2,L
            I = L - II + 2
            IF (P.GE.D(I-1)) GO TO 320
            D(I) = D(I-1)
  280    CONTINUE
  300    I = 1
  320    D(I) = P
  340 CONTINUE
      IFAIL = 0
      RETURN
C 360 IFAIL = P01AAF(ISAVE,1,SRNAME)
  360 IFAIL = 1
      RETURN
      END
C* END OF F02AVFTEXT
C*********************************************** MACON
C  PURPOSE:
C  SETS UP SYSTEM-DEPENDENT CONSTANTS
C----------------------------------------------- MACON
      SUBROUTINE MACON (EPS,TOL,PI)
      DOUBLE PRECISION EPS,TOL,PI
      PI=3.141592653589793D0
C     EPS = SMALLEST POSITIVE REAL NUMBER SUCH THAT 1.0+EPS > 1.0               
      EPS = 2.0D0**(-52)                                                        
C     TOL = RATIO OF SMALLEST REPRESENTABLE REAL NUMBER TO EPS                  
      TOL = 2.0D0**(-1010)                                                      
      RETURN                                                                    
      END
C******************************************************* ERTN
C  PURPOSE:
C  PRINT ERROR RETURN MESSAGE TO LU 99
C---- LAST UPDATE 27/07/96 ----------------------------- ERTN
      SUBROUTINE ERTN(ERMSG,ERNO,*)
      CHARACTER ERMSG*(*)
      INTEGER ERNO
      WRITE(99,100) ERMSG,ERNO
 100  FORMAT(' **** ERROR **** ',A,' (NO.',I6,')'/' FROM:')
      RETURN 1
      END
C******************************************************* GGPER
C  PURPOSE:
C  GENERATE A RANDOM PERMUTATION OF THE INTEGERS 1 TO K.
C
C  ARGUMENTS:
C  DSEED - DOUBLE PRECISION VARIABLE ASSIGNED
C          AN INTEGER VALUE IN THE EXCLUSIVE RANGE
C          1.D0 TO 2147483647.D0.
C          DSEED IS RETURNED WITH A NEW VALUE TO BE
C          USED IN A SUBSEQUENT CALL.
C  K     - INPUT NUMBER OF VALUES TO BE PERMUTED.
C  IPER  - OUTPUT VECTOR OF LENGTH K CONTAINING
C          THE RANDOM PERMUTATION OF THE INTEGERS 1 TO K.
C
C  REQD. ROUTINES - GGUBFS.
C---- LAST UPDATE 01/01/90 ----------------------------- GGPER
      SUBROUTINE GGPER(DSEED,K,IPER)
      INTEGER K,IPER(K),I,ITEMP,KM1,M
      DOUBLE PRECISION DSEED
      M=K
      KM1=K-1
      DO 5 I=1,K
      IPER(I)=I
 5    CONTINUE
      DO 10 I=1,KM1
      J=1+GGUBFS(DSEED)*M
      ITEMP=IPER(M)
      IPER(M)=IPER(J)
      IPER(J)=ITEMP
      M=M-1
 10   CONTINUE
      RETURN
      END
C******************************************************* DATIM
C  PURPOSE:
C  RETURNS TIME AND DATE FROM THE SYSTEM CLOCK
C
C  ARGUMENTS:
C  IDAY - INTEGER*4 ARRAY OF LENGTH THREE, RETURNS WITH THE
C         DATE IN THE FORM DAY, MONTH, YEAR-1900
C  ITME - INTEGER*4 ARRAY OF LENGTH THREE, RETURNS WITH THE
C         TIME IN THE FORM HOURS, MINUTES, SECONDS (24HR CLOCK)
C
C---- LAST UPDATE 13/02/88 ----------------------------- DATIM
      SUBROUTINE DATIM(IDAY,ITME)
C      USE IFPORT
      INTEGER IDAY(3),ITME(3),VALUES(8)
      INTEGER*2 I1,I2,I3,I4
C     GET THE  DAY FROM THE SYSTEM CLOCK
c     CALL GETDAT(I3,I2,I1)
c      IDAY(1)=I1
c      IDAY(2)=I2
c      IDAY(3)=I3-2000
C     GET THE TIME FROM THE SYSTEM CLOCK
c     CALL GETTIM(I1,I2,I3,I4)
c      ITME(1)=I1
c      ITME(2)=I2
c      ITME(3)=I3
      CALL DATE_AND_TIME(VALUES=VALUES)
      IDAY(1)=VALUES(3)
      IDAY(2)=VALUES(2)
      IDAY(3)=VALUES(1)-2000
      ITME(1)=VALUES(5)
      ITME(2)=VALUES(6)
      ITME(3)=VALUES(7)
      RETURN
      END
C******************************************************* TPAGE
C  PURPOSE:
C  WRITES TOF AND HEADING TO LU LPR
C  ON THE FIRST CALL TOF IS ASSUMED AND NOT WRITTEN
C
C  ARGUMENTS:
C  NME  - CHARACTER TITLE
C  IFLE - DATA FILE NAME 12 CHRS
C  IDAY - DATE FROM A CALL TO 'DATE' IN THE CALLING SEGMENT
C  ITME - TIME FROM A CALL TO 'TIME' IN THE CALLING SEGMENT
C         ONLY THE HOUR AND MINUTE IN ELIMENTS 1 AND 2 ARE USED
C  ITME(3) IS USED TO SET THE PAGE COUNTER IF DESIRED. FOR THE
C          PAGE OF THE CURRENT CALL TO BE NUMBERED N, SET ITME(3)
C          TO -N. IF ITME(3) IS THEN SET TO A POSITIVE NUMBER,
C          PAGES WILL BE CONSECUTIVELY NUMBERED N+1,N+2 .. AT
C          SUBSEQUENT CALLS.
C          ITME(3) RETURNS WITH THE POSITIVE CURRENT PAGE VALUE.
C          IF PAGE NUMBERING IS ONLY REQUIRED TO PROCEED FROM 1
C          THROUGH THE PROGRAM RUN, ITME(3) NEED NOT BE SET.
C  LCM  - LOGICAL UNIT FROM WHERE THE HEADING CARDS WILL BE READ
C  LPR  - LOGICAL UNIT FOR THE LINE PRINTER
C  IRC  - FIRST HEADING RECORD ON GF CMD FILE LCM
C  NHR  - NO. OF HEADING CARDS (0 FOR SUPPRESSION)
C  LIN  - WORK SPACE MIN SIZE 20 ELIMENTS. UNLESS NHR=0
C         WHEN LENGTH 1 IS ACCEPTABLE.
C---- LAST UPDATE 25/02/92 ----------------------------- TPAGE
      SUBROUTINE TPAGE(NME,IFLE,IDAY,ITME,LCM,LPR,IRC,NHR,LIN)
      INTEGER*4 IDAY(3),LIN(*),ITME(3)
      CHARACTER IFLE*(*),PG*1,PF*1,NME*(*),FMT*25
      DATA IPGE /0/, PG /' '/,PF/' '/
      DATA FMT /'(1X, 70(1H-),6H :PAGE,I4)'/
      I=LEN_TRIM(IFLE)
      K=LEN_TRIM(NME)
      J=MAX(13+I+K,66)
      WRITE(FMT(5:7),'(I3)') J
      IPGE=IPGE+1
      IF(ITME(3).LT.0) IPGE=-ITME(3)
      ITME(3)=IPGE
      WRITE(LPR,100) PF,NME(1:K),IFLE(1:I),IDAY,ITME(1),ITME(2)
 100  FORMAT(A1,A,'  FILE ',A,2X,I3,'/',I2,'/',I2,I3,':',I2)
      WRITE(LPR,FMT) IPGE
      PF=PG
      IF(NHR.EQ.0.OR.LCM.LE.0) RETURN
      CALL FPOS(LCM,IRC,K)
      DO 1 I=1,NHR
      READ(LCM,101,END=1) (LIN(K),K=1,20)
      WRITE(LPR,102) (LIN(K),K=1,20)
 1    CONTINUE
 101  FORMAT(20A4)
 102  FORMAT(26X,20A4)
      WRITE(LPR,102)
      RETURN
      END
C**************************************************IMD7* GGUBFS
C  PURPOSE:
C  BASIC UNIFORM (0,1) RANDOM NUMBER GENERATOR.
C              FUNCTION FORM OF GGUBS
C
C   ARGUMENTS - GGUBFS - RESULTANT RANDOM DEVIATE.
C               DSEED  - INPUT/OUTPUT DOUBLE PRECISION
C               VARIABLE ASSIGNED AN INTEGER VALUE IN THE
C               EXCLUSIVE RANGE 1.D0 TO 2147483647.D0.
C               DSEED IF RETURNED WITH A NEW VALUE TO
C               BE USED ON SUBSEQUENT CALLS.
C
C---- LAST UPDATE 24/07/90 ----------------------------- GGUBFS
      FUNCTION GGUBFS(DSEED)
      DOUBLE PRECISION DSEED,D2P31M,D2P31,D7P5
      DATA D2P31M/2147483647.D0/,D2P31/2147483648.D0/,D7P5/16807.D0/
      DSEED=DMOD(D7P5*DSEED,D2P31M)
      GGUBFS=DSEED/D2P31
      RETURN
      END
C******************************************************* FPOS
C  PURPOSE:
C  POSITION A FILE AT THE START OF A RECORD OR END OF FILE
C
C  ARGUMENTS:
C  LU -   LOGICAL UNIT ATTACHED TO THE FILE
C  IREC - IF IREC > 0
C         FILE 'LU' IS POSITIONED AT THE START OF RECORD IREC.
C         IF IREC <= 0  'LU' IS POSITIONED AT THE END OF FILE.
C  IER  - RETURNS WITH ZERO OR LAST RECORD NUMBER IF THERE ARE
C         LESS THAN IREC RECORDS OR IREC <= 0 ON ENTRY.
C---- LAST UPDATE 29/06/92 ----------------------------- FPOS
      SUBROUTINE FPOS(LU,IREC,IER)
      DATA IMAX /2147483647/
      REWIND LU
      IER=0
      K=IREC-1
      IF(IREC.LE.0) K=IMAX
      DO 1 I=1,K
 1    READ(LU,100,END=2) J
 100  FORMAT(A1)
      RETURN
 2    IER=I-1
      BACKSPACE LU
      RETURN
      END
